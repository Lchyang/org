* Problem Solving with Algorithms and Data Structures
** Performance of Python Data Structures
** Basic Data Structures
*** stack
+ stack() creates a new stack that is empty. It needs no parameters and returns
  an empty stack
+ push(itme) adds a new item to the top of the stack. It needs the item and
  reutrns nothing.
+ pop() removes the top item from the stack. It needs no parameters and returns
  the item. The stack is modified.
+ peek() returns the top item from the stack but does not remove it. It needs
  no parameters. The stack is not modified.
+ isEmpty() tests to see whether the stack is empty. It needs no parameters and
  returns a boolean value.
+ size() returns the number of items on the stack. It needs no parameters and
  return an integer
**** Implementing a Stack in Python
#+BEGIN_SRC python
  class Stack(object):
      def __init__(self):
          self.items = []

      def isEmpty(self):
          return self.items == []

      def push(self, item):
          self.items.append(item)

      def pop(self):
          return self.items.pop()

      def peek(self):
          return self.items[-1]

      def size(self):
          return len(self.items)

#+END_SRC
**** Simple Balanced Parentheses
#+BEGIN_SRC python
  from pythonds.basic.stack import Stack

  def parChecker(symbolString):
      s = Stack()
      index = 0
      balanced = True
      while index < len(symbolString) and balanced:
          if symbolString[index] == '(':
              s.push('(')
          else:
              if s.isEmpty():
                  balanced = False
              else:
                  s.pop()
          index = index + 1

      return balanced
#+END_SRC
**** Balanced Symbols(A General Case)
#+BEGIN_SRC python
  from pythonds.basic.stack import Stack

  def parCehcker(symbolString):
      s = Stack()
      index = 0
      balance = True
      while index < len(symbolString) and balance:
          symbol = symbolString[index]
          if symbol in '([{':
              s.push(symbol)
          else:
              if s.isEmpty():
                  balance = False
              else:
                  top = s.pop()
                  if not match(top, symbol):
                      balance = False
          index = index + 1
      return balance


  def match(open, close):
      opens = '([{'
      closes = ')]}'
      return open.index(open) == close.index(close)
#+END_SRC
**** Convertin Decimal Numbers to Binary Numbers
#+BEGIN_SRC python
  from pythonds.basic.stack import Stack


  def binary_number(dec_number):
      s = Stack()

      while dec_number > 0:
          rem = dec_number % 2
          s.push(rem)
          dec_number = dec_number // 2

      bin_number = ""
      while not s.isEmpty():
          bin_number = str(s.pop()) + bin_number

      return bin_number
#+END_SRC
**** Infix, Prefix and Postfix Expressions
*** Queue
+ Queue() creates a new queue that is empty. It needs no parameters and returns
  an empty queue
+ enqueue(item) adds a new item to the rear of the queue. It needs the item and
  returns nothing.
+ dequeue() removes the front item from the queue. It needs no parameters and
  returns the item. The queue is modified.
+ isEmpty() tests to see whether the queue is empty. It needs no parameters and
  return a boolern value.
+ size() returns the number of items in the queue. It needs no parameters and
  returns and integer.
**** Implementing a Queue in Python 
#+BEGIN_SRC python
  class Queue:
      def __init__(self):
          self.items = []

      def isEmpty(self):
          return self.items == []

      def enqueue(self, item):
          self.items.insert(0, item)

      def dequeue(self):
          return self.items.pop()

      def size(self):
          return len(self.items)
#+END_SRC
**** Simulation: Hot Potato
#+BEGIN_SRC python
  from pythonds.basic.queue import Queue

  def hot_potato(namelist, num):
      simqueue = Queue
      for name in namelist:
          simqueue.enqueue(name)

      while simqueue.size > 1:
          for i in range(num):
              simqueue.enqueue(simqueue.dequeue())

          simqueue.dequeue()

      return simqueue.dequeue()
#+END_SRC
**** Simulation: Printing Tasks
#+BEGIN_SRC python
  from pythonds.basic.queue import Queue

  import random

  class Printer:
      def __init__(self, ppm): #ppm = 5
          self.pagerate = ppm  # pagerate = 5
          self.currentTask = None
          self.timeRemaining = 0

      def tick(self): #计算当前任务剩余时间 任务完成将currentTask恢复None
          if self.currentTask != None:
              self.timeRemaining = self.timeRemaining - 1
              if self.timeRemaining <= 0:
                  self.currentTask = None

      def busy(self):
          if self.currentTask != None:
              return True
          else:
              return False

      def startNext(self, newtask):
          self.currentTask = newtask
          self.timeRemainina = newtask.getPages() * 60/self.pagerate
#计算当前任务需要的时间


  class Task:
      def __init__(self, time):
          self.timestamp = time
          self.pages = random.randrange(1,21)

      def getStamp(self):
          return self.timestamp

      def getPages(self):
          return self.pages

      def waitTime(self, currenttime):
          return currenttime - self.timestamp

  def simulation(numSeconds, pagesPerMinute):
      labprinter = Printer(PagesPerMinute) #实例化类 每分钟打印五张
      printQueue = Queue() # 初始化队列
      waitingtimes = [] #等待时间列表

      for currentSecond in range(numSeconds): #时间开始走
          if newPrintTask(): 
              task = Task(currentSecond) #初始化task类
              printQueue.enqueue(task) #将task加到queue中

          if (not labprinter.busy()) and (not printQueue.isEmpty()):
# 如果printter不是busy printQueue不是空的
              nexttask = printQueue.dequeue() #从队列中取出一个任务
              waitingtimes.append(nexttask.waitTime(currentSecond))
# 当有第二个或者以后的任务是计算等待的时间并加入watieingtimes列表中
              labprinter.startNext(nexttask)
#计算当前任务需要的时间

          labprinter.tick() #计算剩余时间 并计时 每一次循环时间加一而任务队列的时间减一

      averageWait = sum(waitingtimes)/len(waitingtimes)
      print("Average Wait %6.2 secs %3d tasks remaining." %(averageWait,printQueue.size()))

  def newPrintTask(): #随机生成一个数如果是180返回false如果不是返回true 模拟学生任意时间产出的任务
      num = random.randrange(1,181)
      if num = 180:
          return True
      else:
          return False

#如果有十个学生 总共一个小时每分钟打印五张
  for i in range(10):
      simulation(3600,5)
#+END_SRC
*** Deque
**** The Deque Abstract Data Type
Deque() creates a new deque that is empty. It needs no parameters and return an
empty deque.
addFront(items) adds a new item to the front of the deque. It needs the item
and returns nothing.
addRear(item) adds a new item to the rear of the deque. It needs the item and
returns nothing.
removeFront() removes the front item from the deque. It needs no parameters and
returns the item. The deque is modified.
remvoveRear() removes the rear item from the deque. It needs no parameters and
returns the item. The deque is modified.
isEmpty() tests to seee whether the deque is empty. It needs no parameters and
returns a boolean value.
size() returns the number of items in the deque. It needs no parameters and
returns an integer.
**** Implementing a Deque in Python
We assume that the rear of the deque is at position 0 in the list.
#+BEGIN_SRC python
  class Deque:
      def __init__(self):
          self.items = []

      def isEmpty(self):
          return self.items == []

      def addFront(self, item):
          self.items.append(item)

      def addRear(self, item):
          self.items.insert(0, item)

      def removeFront(self):
          return self.items.pop()

      def removeRear(self):
          return self.itmes.pop(0)

      def size(self):
          return len(self.items)
#+END_SRC
**** Palindrome-Checker
#+BEGIN_SRC python 
  from pythonds.basic.deque import Deque

  def palchecker(aString):
      chardeque = Deque()

      for ch in aString:
          chardeque.addRear(ch)

      stillEqual = True

      while chardeque.size() > 1 and stillEqual:
          first = chardeque.removeFront()
          last = chardeque.removeRear()
          if first != last:
              stillEqual = False
      return stillEqual
#+END_SRC
*** The Unordered List Abstract Data Type
+ List() creates a new list that is empty. It needs no parmeters and returns an
  empty list.
+ add(item) adds a new item to the list. It needs the item and return nothing.
  Assume the item is not already in the list.
+ remove(item) removes the item from the list. It needs the item and modifies
  the list. Assume the items is present in the list
+ search(item) searches for the item in the list. It needs the item and returns
  a boolean value.
+ isEmpty() tests to see whther the list is empty. It needs the item and
  returns a boolean value.
+ size() returns the number of items in the list. It needs no parameters and
  returns an integer.
+ append(item) adds a new item to the end of the list making it the last item
  in the collection. It needs the item and return nothing. Assume the item is
  not already in the list.
+ index(itme) returns the position of item in the list. It needs the item and
  returns the index. Assume the item is in the list.
+ insert(pos, item) adds a new item to the list at position pos. It needs the
  item and returns nothing. Assume the item is not already in the list and
  there are enough existing items to have position pos.
+ pop() removes and returns the last item in the list. It needs nothing and
  returns an item. Assume the list has at least one itme.
+ pop(pos) removes and returns the item at position pos. It needs the position
  and return the item. Assume the item in the list.
**** Implementing an Unordered List: Linked ist
#+BEGIN_SRC python 
  class Node:
      def __init__(self, initdata):
          self.data = initdata
          self.next = None 

      def getData(self):
          return self.data

      def getNext(self):
          return self.next

      def setData(self, newdata):
          self.data = newdata

      def setNext(self, newnext):
          self.next = newnext

  class UnorderedList:

      def __init__(self):
          self.head = None

      def isEmpty(self):
          return self.head == None

      def add(self, item):
          temp = Node(item)
          temp.setNext(self.head)
          self.head = temp #temp是一个类对象每个类对象又包含下一个数据的类对象

      def size(self):
          current = self.head
          count = 0
          while current != None:
              count += 1
              current = current.getNext()

          return count

      def search(self, item):
          current = self.head
          found = False
          while current != None and not found:
              if current.getData() == item:
                  found = True
              else:
                  current = current.getNext()

          return found

      def remove(self, item):
          current = self.head #可以看做指向下一个数据的指针
          previous = None
          found = False
          while not found:
              if current.getData() == item:
                  found = True
              else:
                  previous = current
                  current = current.getNext()

          if previous == None: #当移除一个数据时将前一个的指针指向后一个 中间的数据没有和其他的联系就是移除了
              self.head = current.getNext()
          else:
              previous.setNext(current.getNext())

#每个节点都是一个类对象 每个类对象里面都有同样的方法 只能通过遍历去访问其他对象
#+END_SRC
*** The ordered List Abostract Data Type
+ OrderedList() creates a new ordered list that is empty. It needs no
  parameters and returns an empty list.
+ add(item) adds a new item to the list making sure that the order is
  preserved. It needs the item and returns nothing. Assume the item is not
  already in the list
+ remove(item) removes the item from the list. It needs the item and modifies
  the list. Assume the item is present in the list.
+ search(item) searches for the item in the list. It needs the item and returns
  a boolean value.
+ isEmpty() tests to see whether the list is empty. It needs no parameters and
  returns a boolean value.
+ size() returns the number of items in the list. It needs no parameters and
  returns an integer.
+ index(item) returns the position of item in the list. It needs the item and
  return the index. Assume the item is in the list.
+ pop() removes and returns the last item in the list. It need nothing and
  returns and item. Assume the list has at least one item.
+ pop(pos) removes and returns the item at position pos. It needs the position
  and returns the item. Assume the itme is in the list.
**** Implementing an Ordered List
#+BEGIN_SRC python 
  class Node:
      def __init__(self, initdata):
          self.data = initdata
          self.next = None

      def getData(self):
          return self.data

      def getNext(self):
          return self.next

      def setData(self, newdata):
          self.data = newdata

      def setNext(self, newnext):
          self.next = newnext
#+END_SRC

#+BEGIN_SRC python
  class OrderList:
      def __init__(self):
          self.head = None

      def search(self.item):
          current = self.head
          found = False
          stop = False
          while current != None and not found and not stop:
              if current.getData() == item:
                  found = True
              else:
                  if current.getData() > item:
                      stop = True
                  else:
                      current = current.getNext()
          return found

      def add(self, item):
          current = self.head
          previous = None
          stop = False
          while current != None and not stop:
              if current.getData() > item:
                  stop = True
              else:
                  previous = current
                  current  = current.getNext()

          temp = Node(imte)
          if previous == None:
              temp.setNext(self.head)
              self.head = temp
          else:
              temp.setNext(current)
              previous.setNext(temp)

      def isEmpyt(self):
          return self.head == None

      def size(self):
          current = self.head
          count = 0
          while current != None:
              count  = count + 1
              current = current.getNext()

      return count

#+END_SRC
** tree
#+BEGIN_SRC python
  class BinaryTree:
      def __init__(self, rootObj):
          self.key = rootObj
          self.leftChild = None
          self.rightChild = None

      def insertLeft(self, newNode):
          if self.leftChild == None:
              self.leftChild = BinaryTree(newNode)
          else:
              t = BinaryTree(newNode)
              t.leftChild = self.leftChild
              self.leftChild = t

      def insertRight(self, newNode):
          if self.rightChild is None:
              self.rightChild = BinaryTree(newNode)
          else:
              t = BinaryTree(newNode)
              t.rightChild = self.rightChild
              self.rightChild = t

      def getRightChild(self):
          return self.rightChild

      def getLeftChild(self):
          return self.leftChild

      def setRootVal(self, obj):
          self.key = obj

      def getRootVal(self):
          return self.key
#+END_SRC
*** Tree Traversals
**** preorder
In a preorder traversal, we visit the root node first, then revursively do a
preorder traversal of the left subtree, followed by arecursive preorder
traversal of the right subtree.
**** inordre
**** postorder
*** Binary Heap
+ BinaryHeap() create a new, empty, binary heap.
+ insert(k) adds a new item to the heap.
+ findMin() returns the item with the minimum key value, leaving item in the
  heap
+ delMin() returns the item with the minimum key value, removing the item form
  the heap
+ isEmpty() returns true if the heap is empty, false otherwise
+ size() returns the number of items in the heap.
+ buildHeap(list) builds a new heap form a list of keys
**** Binary Heap Implementation
#+BEGIN_SRC python
  class BinHeap:
      def __init__(self):
          self.heapList = [0]
          self.currentSize = 0

      def percUp(self, i):
          while i // 2 > 0:
              if self.heapList[i] < self.heapList[i // 2]:
                  self.heapList[i], self.heapList[i // 2] = self.heapList[i //
          2], self.heapList[i]
              i = i // 2

      def insert(self, k):
          self.heapList.append(k)
          self.currentSize = self.currentSize + 1
          self.percUp(self.currentSize)

      def percDown(self, i):
          while(i * 2) <= self.currentSize:
              mc = self.minChild(i)
              if self.heapList[i] > self.heapList[mc]:
                  tmp = self.heapList[i]
                  self.heapList[i] = self.heapList[mc]
                  self.heapList[mc] = tmp
              i = mc

      def minChild(self, i):
          if i * 2 + 1 > self.currentSize:
              return i * 2
          else:
              if self.heapList[i * 2] < self.heapList[i*2+1]:
                  return i * 2
              else:
                  return i * 2 + 1

      def delMin(self):
          retval = self.heapList[1]
          self.heapList[1] = self.heapList[self.currentSize]
          self.currentSize = self.currentSize - 1
          self.heapList.pop()
          self.percDown(1)
          return retval

      def buildHeap(self, alist):
          i = len(alist) // 2
          self.currentSize = len(alist)
          self.heapList = [0] + alist[:]
          while (i > 0):
              self.percDown(i)
              i = i - 1
#+END_SRC
