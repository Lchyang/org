* The C programmer language
** CHAPTER 1
*** 1.5.2 Character Couting
 %ld use print long int
 %d use print int
 %f use print double or floating %0.f suppresses printing of the decimal point
 and the fraction part, which is zero
 #+BEGIN_SRC c
   #include<stdio.h>

   /* count characters in input; 1st version */
   int main(void)
   {
     long nc;

     nc = 0;
     while(getchar() != EOF)
       ++nc;
     printf("%ld\n", nc);
   }
 #+END_SRC
 ++nc you could instead write nc = nc+1

 Use for loop
 #+BEGIN_SRC c
   #inclue<stdio.h>

   /* count characters in input; 2nd version */
   int main(void)
   {
     double nc;
     for (nc = 0; getchar() != EOF; ++nc;)
     ;
     printf("%0.f\n", nc)
   }
 #+END_SRC
 grammatical语法 semicolon分号 intelligently聪明,智能预警
*** 1.5.3 line Couting
 #+BEGIN_SRC c
   #include <stdio.h>

   /* count lines in input */
   int main(void)
   {
     int c, nl;

     nl = 0;
     whilc((c = getchar()) != EOF)
       if (c == '\n')
         ++n1;
     printf("%d\n", nl);
   }
 #+END_SRC

 Exercis 1-10 Write a program to copy its input ot its output, replacing each
 tab by \t, each backspace by \b, and each backslash by \\. Tshis make tabs and
 backspaces visibvle in an unambiguous(不清楚) way.
 #+BEGIN_SRC c
 #include <stdio.h>

 /* count lines in input */
 int main(void)
 {
   int c;
   //int d = 0;

   while((c = getchar()) != EOF){
     // d = 0;
     if(c == '\t')
       {
         putchar('\\');
         putchar('t');
         //   d = 1;
       }
     else if(c == '\\')
       {
         putchar('\\');
         putchar('\\');
         //d = 1;
       }
     else if(c == '\b')
       {
         putchar('\\');
         putchar('b');
         //d = 1;
       }
     else{
       putchar(c);
     }
 }
   return 0;
 }
 #+END_SRC
*** 1.6 Arrays
 Write a program to count the number of occurrences of each digit
 Here is one version of the program:
 #+BEGIN_SRC c
   #include <stdio.h>
   /* count digits, white space, others  */
   int main(void)
   {
     int c, i, nwhite, nother;
     int ndigit[10];
 //define a arry 0-9
     nwhite = nother = 0;
     for(i=0; i<10; ++i)
       ndigit[i] = 0;

     while((c = getchar()) != EOF)
       if (c >= '0' && c <= '9')
         ++ndigit[c-'0'];
       else if(c == ' ' || c== '\n' || c == '\t')
         ++nwhite;
       else
         ++nother;

     printf("digits =");
     for(i = 0; i < 10; ++i)
       printf(" %d", ndigit[i]);
     printf(", white space = %d, other = %d\n", nwhite, nother);
   }
 #+END_SRC

 Exercise Write a program to print a histogram of the lengths of words in its
 input. It is easy to draw the histogram with the bars horizontal; a vertical
 orientation is more challenging.
 #+BEGIN_SRC c
 #include <stdio.h>

 #define MAXWORDLEN 10

 int main(void)
 {
   int c;
   int inspace = 0;
   /* define a arry */
   long lengtharr[MAXWORDLEN + 1];
   int wordlen = 0;

   /* int firstletter = 1; */
   int thisval = 0;
   long maxval = 0;
   int thisidx = 0;
   int done = 0;

   /* buid the arry */
   for(thisidx = 0; thisidx <= MAXWORDLEN; thisidx++)
     {
       lengtharr[thisidx] = 0;
     }

   while(done == 0)
     {
       c = getchar();

       if(c == ' ' || c == '\t' || c == '\n' || c == EOF)
         {
           /* inspace avoid count many space or \t... */
           if(inspace == 0)
             {
               /* firstletter = 0; */
               inspace = 1;

               if(wordlen <= MAXWORDLEN)
                 {
                   if(wordlen > 0)
                     {
                       thisval = ++lengtharr[wordlen - 1];
                       /* count the word apperent most  */
                       if(thisval > maxval)
                         {
                           maxval = thisval;
                         }
                     }
                 }
               else{
                 thisval = ++lengtharr[MAXWORDLEN];
                 if(thisval > maxval)
                   {
                     maxval = thisval;
                   }
               }
             }
           /* end cycle */
           if(c == EOF)
             {
               done = 1;
             }
         }
       /* 记录每个单词的长度 */
       /* what are you doing firstletter? */
       else
         {
           if(inspace == 1)
             {
               wordlen = 0;
               /* firstletter = 0; */
               inspace = 0;
             }
           ++wordlen;
         }
     }
   /* 生成最大数降序打印 纵坐标*/
   for(thisval = maxval; thisval > 0; thisval--)
     {
       printf("%4d  | ", thisval);
       for(thisidx = 0; thisidx <= MAXWORDLEN; thisidx++)
         {
           /* 判断在每个单词数量中对应的个数用*来代替 */
           if(lengtharr[thisidx] >= thisval)
             {
               printf("*  ");
             }
           else
             {
               printf("   ");
             }
         }
       printf("\n");
     }
   /* 打印横线 */
   printf("      +");
   for(thisidx = 0; thisidx <= MAXWORDLEN; thisidx++)
     {
       printf("---");
     }
   printf("\n       ");
   /* 打印横坐标 */
   for(thisidx = 0; thisidx < MAXWORDLEN; thisidx++)
     {
       printf("%2d ", thisidx + 1);
     }
   printf(">%d\n", MAXWORDLEN);

   return 0;
 }
 #+END_SRC
*** 1.9 characters arrays
 1-17 Write aprogram to print all input lines that are longer than 80
 characters. 
 #+BEGIN_SRC c
 #include <stdio.h>

 #define MINLENGTE 81

 int readbuff(char *buffer){
   size_t i=0;
   int c;
   while (i < MINLENGTE){
     c = getchar();
     if(c == EOF) return -1;
     if(c == '\n') return 0;
     buffer[i++] = c;
   }
   return 1;
 }

 int copyline(char *buffer){
   size_t i;
   int c;
   int status = 1;
   for(i=0; i<MINLENGTE; i++)
     putchar(buffer[i]);
   while(status == 1){
     c = getchar();
     if (c == EOF)
       status = -1;
     else if(c =='\n')
       status = 0;
     else
       putchar(c);
   }
   putchar('\n');
   return status;
 }

 int main(void){
   char buffer[MINLENGTE];
   int status = 0;
   while (status != -1){
     status = readbuff(buffer);
     if (status == 1)
       status = copyline(buffer);
   }
   return 0;
 }
 #+END_SRC

 1-18 Write a program to remove all trailing blanks and tabs from each line of
 input, and to delete entirely blank lines
 #+BEGIN_SRC c

 #include<stdio.h>
 #include<stdlib.h>

 #define MAXQUEUE 1001

 int advance(int pointer)
 {
   if (pointer < MAXQUEUE - 1)
     return pointer + 1;
   else
     return 0;
 }

 int main(void)
 {
   char blank[MAXQUEUE];
   int head, tail;
   int nonspace;
   int retval;
   int c;

   retval = nonspace = head = tail = 0;
   while((c = getchar()) != EOF) {
     if(c == '\n'){
       head = tail = 0;
       if (nonspace)
         putchar('\n');
       nonspace = 0;
     }
     else if (c == ' ' || c == '\t'){
       if (advance(head)) == tail){
       putchar (blank[tail]);
       tail = advance(tail);
       nonspace = 1;
       retval = EXIT_FAILURE;
     }
     blank[head] = c;
     head = advance(head);
     }
   else{
     while (head != tail){
       putchar(blank[tail]);
       tail = advance(tail);
     }
     putchar(c);
     nonspace = 1;
   }
   }
 return retval;
 }

 #+END_SRC

 1-19 Write a function reverse(s) that reverses the character string s. Use it
 to write a program that reverses its input a line at a line.
 #+BEGIN_SRC c

 #include <stdio.h>

 #define MAX_LINE 1024

 void discardnewline(char s[])
 {
   int i;
   for(i = 0; s[i] != '\0'; i++)
     {
       if(s[i] == '\n')
         s[i] = '\0';
     }
 }

 int reverse(char s[])
 {
   char ch;
   int i, j;

   for(j = 0; s[j] != '\0'; j++)
     {
     }
   --j;

   for(i = 0; i < j: i++)
     {
       ch = s[i];
       s[i] = s[j];
       s[j] = ch;
       --j;
     }

   return 0;
 }

 int getline(char s[], int lim)
 {
   int c, i;
   for(i = 0; i < lim - 1 && (c = getchar()) != EOF && c !='\n'; ++i)
     {
       s[i] = c;
     }
   if (c == '\n')
     {
       s[i++] = c;
     }
   s[i] = '\0';
   return i;
 }

 int main(void)
 {
   char line[MAX_LINE];

   while(getline(line, sizeof line)> 0)
     {
       discardnewline(line);
       reverse(line);
       printf("%\n", line);
     }
   return 0;
 }

 #+END_SRC
*** 1.10 External Variables and Scope(练习题未完成)
** CHAPTER 2
*** 2.2 Write a program to determine the ranges of char, short, int
 #+BEGIN_SRC c

 #include <stdio.h>
 #include <limits.h>
 int main () {
   printf("Size of Char %d\n", CHAR_BIT);
   printf("Size of Char Max %d\n", CHAR_MAX);
   printf("Size of Char Min %d\n", CHAR_MIN);
   printf("Size of int min %d\n", INT_MIN);
   printf("Size of int max %d\n", INT_MAX);
   printf("Size of long min %ld\n", LONG_MIN);
   printf("Size of long max %ld\n", LONG_MAX);
   printf("Size of short min %d\n", SHRT_MIN);
   printf("Size of short max %d\n", SHRT_MAX);
   printf("Size of unsigned char %u\n", UCHAR_MAX); /* SF */ printf("Size of unsigned long %lu\n", ULONG_MAX); /* RB */ printf("Size of unsigned int %u\n", UINT_MAX); /* RB */ printf("Size of unsigned short %u\n", USHRT_MAX); /* SF */
   return 0; }


 Size of Char 8
 Size of Char Max 127
 Size of Char Min -128
 Size of int min -2147483648
 Size of int max 2147483647
 Size of long min -9223372036854775808
 Size of long max 9223372036854775807
 Size of short min -32768
 Size of short max 32767
 Size of unsigned char 255
 Size of unsigned long 18446744073709551615
 Size of unsigned int 4294967295
 Size of unsigned short 65535
 #+END_SRC
** CHAPTER 4
*** 4.1
#+BEGIN_SRC c
#include <stdio.h>
#define MAXLINE 1000

int getlines(char line[], int max);
int strindex(char source[], char searchfor[]);

char pattern[] = "ould";

int main(void)
{
  char line[MAXLINE];
  int found = 0;

  while (getlines(line, MAXLINE) > 0)
    if (strindex(line, pattern) >= 0){
      printf("%s", line);
      found ++;
    }
  return found;
}

int getlines(char s[], int lim)
{
  int c, i;

  i = 0;
  while(--lim > 0 && (c=getchar())!= EOF && c != '\n'){
    s[i++] = c;
  }
  if (c == '\n'){
    s[i++] = c;
  }
  s[i] = '\0';
  return i;
}

int strindex(char s[], char t[])
{
  int i, j, k;

  for(i = 0; s[i] != '\0'; i++){
    /* 轮询s中的字符直到有和t中字符一致的字符出现,然后同时向后比较s,t中字符,如果t轮询到'\0'而且k>0说明存在 */
    for(j = i, k = 0; t[k] != '\0' && s[j] == t[k]; j++, k++)
      ;
    if (k > 0 && t[k] == '\0')
      return i;
  }
  return -1;
}

#+END_SRC
* 计算机系统基础
** 运算电路基础
* 指针
** 指针的应用场景
1.交换两个变量的值
#+BEGIN_SRC c
void swap(int *pa, int *pb)
{
int t = *pa;
*pa = *pb;
*pb = t;
}
#+END_SRC
指针最常见的错误,定义了指针变量,还没有指向任何变量,就开始使用指针.
** 函数参数中的数组实际上是指针. 
数组变量本身表达地址,所以 int a[10]; int *p = a;  无需&取地址,
但是数组单元表达的是变量,需要&取地址 a == &a[0]

#+BEGIN_SRC c
int m;
int *p;
*p = &m;
#+END_SRC
此时*p 和 p[0] 表达的值是一样的 可以认为m是一个长度为1的数组.但是对于m本身来说
不可以用m[0]来表示,对于指针来说可以这样做. 
数组可以看成为const的指针
int b[] --> int * const b;
所以 int b[] = a 做法是不可以用的
** 指针与const
当指针是const时,表示一旦得到的某个变量的地址,不能再指向其他变量
int *counst q = &i; // q 是 const
*q = 26 是可以的 因为 变量本身不是const类型
q++ // 是不可以的 地址本身是不可以变的

const int *p = &i;
*p = 26; //error (*p) 是 const
i = 26; // ok
p = &j; // ok

const int *p = &i;
int const *p = &i;
int * const p = &i; 都是什么意思?
当const在*前面是表示 *p = &i 这个是不可以修改的 *p = 25 是不对的
当const在*后面表示 指针本身不能修改 p++ 是错的
** const数组
const int a[] = {1,2,3,4}
数组变量已经是const的指针了,这里的const表明每个单元都是 const int 
所以必须通过初始化进行赋值

因为把数组传入函数时传递的是地址,所以那个函数内部可以修改数组的值
为了保护数组不被函数破坏可以 设置参数为const
int sum(const int a[], int lenghth)
** 指针的运算
当定义一个字符数组时当指针+1是 地址的数量+1 sizeof(char)
当定义一个int数组时当指针+1是 地址的数量4 sizeof(int)
int ac[] = {1,2,3,4,5};
int *p = ac;
*(p+n) 等价于 ac[n]

指针可以做这些运算:
给指针加减一个整数(+, +=, - , -=)
递增递减(++, --)
两个指针想减 (相减得到的是指针的差)sizeof(类型) 而不是真是的地址数的差值.
int *q = ac[0]
int *q1 = ac[5]
q1 - q = 5 表示五个int类型 真是地址的差值为20

*p++ 取出p所指的那个数据来,之后顺便把p移到下一个位置去,
*的优先级没有++高
常用于数组类的连续空间操作

数组的遍历
#+BEGIN_SRC c
  #include<stdio.h>

  int main(void)
  {
    char ac[] = {0,1,2,3,4,5,-1,};
    char *p = &ac[0]; // char *p = ac;
    int i;
    /* 传统遍历 */
    for( i=0; i<sizeof(ac)/sizeof(ac[0]); i++){
      printf("%d\n", ac[i]);
    }
    /* 指针遍历 */
    for(p=ac; *p!=-1; p++){
      printf("%d\n", *p);
    }
    while( *p != -1){
      printf("%d\n", *p++);
    }
  }

#+END_SRC

指针有不同的类型 不同类型的指针是不能相互赋值的

指针可以类型转换
int *p = ac;
char *q = ae;

p = q //error

int *p = &i;
void*q = (void*)p;
** 动态内存分配(需要再次深入)
#+BEGIN_SRC c
  #include <stdio.h>
  #include <stdlib.h>

  int main(void)
  {
    int number;
    int *a;
    int i;
    printf("输入数量: ");
    scanf("%d", &number);
    /* int a[number] */
    a = (int*)malloc(number*sizeof(int));
    for(i=0; i<number; i++){
      scanf("%d", &a[i]);
    }
    for(i=number-1; i>=0; i--){
      printf("%d", a[i]);
    }
    free(a);
  }
#+END_SRC

常见问题: 申请了没有free长时间运行内存下降.
** 字符串操作
*** 字符串数组
char a[][10] 代表每个数组单元里面最多10个单位, char *a[]代表一个指针指向一个数
组

c 语言程序的main函数可以包含其他值int main(int arg, char const * arg[])
#+BEGIN_SRC c
#include <stdio.h>

int main(int argc, char const *argv[])
{
  for(int i=0; i<argc; i++){
    printf("%d:%s\n",i, argv[i]);
  }
  return 0;
}

#+END_SRC

*** 字符串函数的实现
string.h
strlen strcmp strcpy strcat strchr strstr

size_t strlen(const char *s); // char *s --> char * s[] const 表示不可以修改数组  

实现strlen
#+BEGIN_SRC c
#include <stdio.h>
#include <string.h>

int mylen(char const *s)
{
  int cnt = 0;
  int inx = 0;
  while(s[inx] != '\0'){
    cnt++;
    inx++;
  }
  return inx;
}

int main(int argc, char const *argv[])
{
  char line[] = "Hello";
  printf("strlne=%d\n", mylen(line));
  printf("sizeof=%lu\n", sizeof(line));
  return 0;
}


#+END_SRC
* 结构类型
** 枚举
enum 枚举类型{名字,..,..,};
enum color {red, yellow, green};
c语言中 枚举的类型其实是int
#+BEGIN_SRC c
#include<stdio.h>

enum color{red, yellow, green};

void f(enum color c); // enum 是必须的

int main(void)
{
enum color t = red;
scanf("%d", &t);
f(t);

return 0;
}

void f(enum color c){
printf("%d\n", c);
}
#+END_SRC
** 结构
#+BEGIN_SRC c
#include <stdio.h>

int main(int argc, const char *argv[])
{
  struct data{
    int month;
    int year;
    int day;
  };

  struct data today;

  today.month = 07;
  today.day = 33;
  today.year = 2018;

  printf("Today's data is %i-%i-%i.\n",
         today.year,today.month,today.day);

  return 0;
}

#+END_SRC
结构的初始化
struct data{int month; int day; int year;};
struct data today = {07, 31, 2018};
sturct data thismoth = {.month=7, .year=2018};
当没有给值时默认为0

结构作为函数参数
int numberOfDays(struct date d)
1.整个结构可以作为参数值传入函数
2.这时候是在函数内新建一个结构变量,并复制调用者结构的值
3.也可以返回一个结构
4.这与数组完全不同
**** 指向结构的指针
#+BEGIN_SRC c
  struct data{
    int month;
    int day;
    int year;
  } myday;

  struct date *p = &myday;

  (*p).month = 12;
  p -> month = 12;
#+END_SRC
由于函数传入结构参数时,并不出传入结构的指针,而是传入结构的值,所以在操作结构里面
的值时,要使用指针 -> 操作是(*p).的简化 表示 p指向结构里的month
**** 结构数组
* 搜索和排序
** 搜索 
#+BEGIN_SRC c
  #include<stdio.h>

  int searh(int key, int a[], int len) //len用来计算数组的长度
  {
    int ret = -1;
    for(int i=0; i<len; i++){
      if(key == a[i]){
        ret = i;
        break;
      }
    }
    return ret;
  }


  int main()
  {
    int a[] = {1,2,3,22,12,23,45,50};
    int r = searh(22, a, sizeof(a)/sizeof(a[0]));
    printf("%d\n", r);
    return 0;
  }
#+END_SRC
