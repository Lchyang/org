* drf 
** 利用 djnago view 序列化数据
 #+BEGIN_SRC python
   from django.views.generic.base import View

   class GoodListView(View):
       def get(self, request):
           json_list = []
           goods = Goods.objects.all()
           for good in goods:
               json_dict = {}
               json_dict["name"] = good.name
               json_dict["category"] = good.category.name
               json_list.append(json_dict)

           from django.http import HttpResponse
           import json
           return HttpResponse(json.dumps(json_list), content_type='application/json')
 #+END_SRC
 这样做的缺点, 工作量大而且容易出错,当有时间类型时 json.dumps 会出错

 改善 但是 image time 还是不能序列化
 #+BEGIN_SRC python
   from django.forms.models import model_to_dict

   for good in goods:
       joon_dict = model_to_dict(good)
       json_list.append(json_dict)
 #+END_SRC

 改善 为什么用 json.loads 因为 HttpRespoinse 里面有 json.dumps 了.
 #+BEGIN_SRC python
 from django.core import serizlizers
 json_data = serizlizers.serizlizers("json", goods)
 json_data = json.loads(json_data)

 from django.http import JsonResponse
 return JsonResponse(json_data, safe=False)
 #+END_SRC
 django 还提供了返回 json 的方法
** drf ApiView 方法 
*** 使用 drf 文档 
#+BEGIN_SRC python from rest_framework.documentation import include_docs_urls urlpatterns = [rul(r'docs/', include_docs_url(title="b"))] #+END_SRC If you're intending to use the browsable API you'll probably also want to add REST framework's login and logout views. Add the following to your root urls.py file.drf 登录配置 #+BEGIN_SRC python urlpatterns = [... url(r'^api-auth/', include('rest_framework.urls'))] #+END_SRC *** 使用 drf serializer 我们需要开始使用 Web API 的第一件事是提供一种将代码段实例序列化和反序列化为表示形式（如 json）的方法。 我们可以通过声明与 Django 表单非常相似的序列化器来完成此操作。 在名为 serializers.py 的 snippets 目录中创建一个文件，并添加以下内容 #+BEGIN_SRC python from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): """ Create and return a new `Snippet` instance, given the validated data. """ return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): """ Update and return an existing `Snippet` instance, given the validated data. """ instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance #+END_SRC more read http://www.django-rest-framework.org/tutorial/1-serialization/ view 层 Response 是 drf 的 response #+BEGIN_SRC python class GoodsListView(APIView): ''' List all goods ''' def get(self, request, format=None): goods = Goods.objects.all() goods_serializer = GoodSerializer(goods, many=True) return Response(goods_serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() # .save 会调用 serializer 的 create 方法 return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) #+END_SRC post 方法是当前端有数据添加时可以通过 post 添加到数据库 *** 使用 model serializer #+BEGIN_SRC python class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') #+END_SRC http://www.django-rest-framework.org/tutorial/1-serialization/ #+BEGIN_SRC python class CategorySerializer2(serializers.ModelSerializer): class Meta: model = GoodsCategory fields = "__all__" class CategorySerializer(serializers.ModelSerializer): sub_cat = CategorySerializer2(many=True) class Meta: model = GoodsCategory fields = "__all__" class GoodsSerializer(serializers.ModelSerializer): category = CategorySerializer() class Meta: model = Goods fields = "__all__" #+END_SRC 如果涉及到多个数据层可以这样做
** drf mixin 和 GenericAPIView
 #+BEGIN_SRC python
 from snippets.models import Snippet
 from snippets.serializers import SnippetSerializer
 from rest_framework import mixins
 from rest_framework import generics

 class SnippetList(mixins.ListModelMixin,
                   mixins.CreateModelMixin,
                   generics.GenericAPIView):
     queryset = Snippet.objects.all()
     serializer_class = SnippetSerializer

     def get(self, request, *args, **kwargs):
         return self.list(request, *args, **kwargs)

     def post(self, request, *args, **kwargs):
         return self.create(request, *args, **kwargs)
 #+END_SRC

 drf mixins.ListModelMixin.list 源码
 #+BEGIN_SRC python
 class ListModelMixin(object):
     """
     List a queryset.
     """
     def list(self, request, *args, **kwargs):
         queryset = self.filter_queryset(self.get_queryset())

         page = self.paginate_queryset(queryset)
         if page is not None:
             serializer = self.get_serializer(page, many=True)
             return self.get_paginated_response(serializer.data)

         serializer = self.get_serializer(queryset, many=True)
         return Response(serializer.data)
 #+END_SRC

 drf generics.ListAPIView 源码
 #+BEGIN_SRC python
 class ListAPIView(mixins.ListModelMixin,
                   GenericAPIView):
     """
     Concrete view for listing a queryset.
     """
     def get(self, request, *args, **kwargs):
         return self.list(request, *args, **kwargs)
 #+END_SRC
 所以 generics.xxxAPIView 继承的 mixins.xxxModelMixin 和 generics 里自己的
 GenericAPIView  view 代码简化
 #+BEGIN_SRC python
 class SnippetList(generics.ListAPIView):
     queryset = Snippet.objects.all()
     serializer_class = SnippetSerializer
 #+END_SRC
 如果像配置分页可以直接在 setting 里面配置
 REST_FRAMEWORK = {
     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
     'PAGE_SIZE': 10,
     'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework.authentication.BasicAuthentication',
         'rest_framework.authentication.SessionAuthentication',
         'rest_framework.authentication.TokenAuthentication',
     )
 }
 可以在 rest_framework de settings.py 中看的源码
 [[http://www.django-rest-framework.org/tutorial/3-class-based-views/#using-generic-class-based-views][rest_frame_work]]
 更多的分页设置
 http://www.django-rest-framework.org/api-guide/pagination/
** drf Viewsets
 #+BEGIN_SRC python
 class GenericViewSet(ViewSetMixin, generics.GenericAPIView):
     """
     The GenericViewSet class does not provide any actions by default,
     but does include the base set of generic view behavior, such as
     the `get_object` and `get_queryset` methods.
     """
     pass
 #+END_SRC
 ViewSetMixin 重新了 asview()方法 定义 url 时可以
 #+BEGIN_SRC python

 from snippets.views import SnippetViewSet, UserViewSet, api_root
 from rest_framework import renderers

 snippet_list = SnippetViewSet.as_view({
     'get': 'list',
     'post': 'create'
 })
 #+END_SRC
 还可以配合 Routers 使用
 #+BEGIN_SRC python
 from django.conf.urls import url, include
 from rest_framework.routers import DefaultRouter
 from snippets import views

 # Create a router and register our viewsets with it.
 router = DefaultRouter()
 router.register(r'snippets', views.SnippetViewSet)
 router.register(r'users', views.UserViewSet)

 # The API URLs are now determined automatically by the router.
 urlpatterns = [
     url(r'^', include(router.urls))
 ]
 #+END_SRC
 http://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/
 django rest_frame_work view 的具体逻辑和继承关系可以参考 源码 generics.py 
 mixins.py viewset.py 三个文件 大致逻辑是 generics 继承了 mixins 和自身的类
 viewset 继承了 generics 自身的类 和自己自身的类. 还有其他各种组合参考源码.
* 解决跨域问题
github 搜索 django-cors-headers
* 用户的登录和注册
** 舍弃 csrf 用法 
前后端分离 本身就可能 前端和后端跨站
** 用 drf 的 TokenAuthentication
#+BEGIN_SRC python
from rest_framework.authtoken import views
urlpatterns += [
    url(r'^api-token-auth/', views.obtain_auth_token)
]
#+END_SRC
** jwt 用户认证
https://www.jianshu.com/p/180a870a308a
* django 项目
*** django 部署（nginx + gunicorn)
gunicorn --bind "localhost:8000" mblog.wsgi
localhost:8000 是运行的端口 mblog 在 manage.py 的文件夹目录下

nginx
server {
    charset utf-8;
    listen 80;
    server_name demo.zmrenwu.com; ①

    location /static { ②
        alias /home/yangxg/sites/demo.zmrenwu.com/django-blog-tutorial/static; 
    }

    location / { ③
        proxy_set_header Host $host;
        proxy_pass http://unix:/tmp/demo.zmrenwu.com.socket;
    }
}
使用非 root 用户 log /var/log/nginx/error.log 配置/etc/nginx/sites-av../
1 域名或者 ip
2 当路径中写 static 用 alias  没有写用 root
3 proxy_pass 不能用 localhost 代替 127.0.0.1
*** DRF views 梳理
**** GenericViewSet(viewset)
***** GenericaAPIView
****** APIView
******* View --django 
**** minxin
***** CreateModelMixin
***** ListModelMixin
***** UpdateModelMixin
***** DestoryModelMixin
***** REtrieveModelMixin

**** celery
  celery 是一个简单、灵活且可靠的、处理大量消息的分布式系统
  专注于实时处理异步任务队列
  同时也支持任务调度
***** 使用场景
  异步任务： 将耗时操作任务提交给 celery 去异步执行，比如发送短信/邮件、消息推送、
  音视频处理等
  定时任务： 类似于 crontab， 比如每日数据统计
***** Celery 基本使用
  tasks.py
  #+BEGIN_SRC python
    import time
    from celery import Celery


    broker = 'redis://localhost:6379/1'
    backend = 'redis://localhost:6379/2'
    app = Celery('my_stacks', broker=broker, backend=backend)


    @app.task
    def add(x, y):
        print('enter call func..')
        time.sleep(4)
        return x + y
  #+END_SRC
  test_celery.py
  #+BEGIN_SRC python
    from tasks import add

    if __name__ == '__main__':
        print('start task...')
        result = add.delay(2, 8)
        print('end stask... ')
        print(result)
  #+END_SRC
  基本命令
  #+BEGIN_SRC python
    In [1]: from tasks import add

    In [2]: add.delay(2,8)
    Out[2]: <AsyncResult: d368f92c-a938-4ec3-aa28-bb046275d948>

    In [3]: result = add.delay(2,9)

    In [4]: result.ready()
    Out[4]: True

    In [5]: result.get()
    Out[5]: 11
  #+END_SRC
***** Celery 配置文件
  celery_app.__init__.py
  #+BEGIN_SRC python
    from celery import Celery


    app = Celery('demo')
    # 通过 celery 实例加载配置模块
    app.config_from_object('celery_app.celeryconfig')
  #+END_SRC
  celery_app.celeryconfig.py
  #+BEGIN_SRC python
    BROKER_URL = 'redis://localhost:6379/1'

    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'

    CELERY_TIMEZONE = 'Asia/Shanghai'

    # 导入制定模块
    CELERY_IMPORTS = (
        'celery_app.task1',
        'celery_app.task2'
    )

  #+END_SRC
  celery_app.task1.py
  #+BEGIN_SRC python
    import time

    from celery_app import app


    @app.task
    def add(x, y):
        time.sleep(3)
        return x + y

  #+END_SRC
  celery_app.task2.py
  #+BEGIN_SRC python
    import time

    from celery_app import app


    @app.task
    def multiply(x, y):
        time.sleep(4)
        return x * y

  #+END_SRC

  test_celery.py
  #+BEGIN_SRC python
    from celery_app import task1, task2


    task1.add.delay(2, 4)
    task2.multiply.delay(4, 5)
    print('end...')
  #+END_SRC
  通过 celery worker -A celery_app -l INFO 命令启动 worker
  然后运行 python test_celery.py 
***** 定时任务
  #+BEGIN_SRC python
    from datetime import timedelta
    from celery.schedules import crontab

    BROKER_URL = 'redis://localhost:6379/1'

    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'

    CELERY_TIMEZONE = 'Asia/Shanghai'

    # 导入制定模块
    CELERY_IMPORTS = (
        'celery_app.task1',
        'celery_app.task2'
    )

  #定时任务
    CELERYBEAT_SCHEDULE = {
        'task1': {
            'task': 'celery_app.task1.add',
            'schedule': timedelta(seconds=10),
            'args': (2, 8),
        },
        'task2': {
            'task': 'celery_app.task2.multiply',
            'schedule': crontab(hour=19, minute=14),
            'args': (4, 5)
        }
    }
  #+END_SRC
  启动 任务
  celery worker -A celery_app -l INFO
  celery beat -A celery_app -l INFO
***** Django 中使用 celery
  pip install django-celery 

  在 setting 同目录下创建 celeryconfig.py 文件
  #+BEGIN_SRC python
    from datetime import timedelta
    import djcelery

    djcelery.setup_loader()

    CELERY_QUEUES = {
        # 定时任务
        'beat_tasks': {
            'exchange': 'beat_tasks',
            'exchange_type': 'direct',
            'binding_key': 'beat_tasks',
        },
        # 普通任务
        'work_queue': {
            'exchange': 'work_queue',
            'exchange_type': 'direct',
            'binding_key': 'work_queue',
        }
    }

    # 默认任务
    CELERY_DEFAULT_QUEUE = 'work_queue'


    CELERY_IMPORTS = (
        'blog.tasks',
    )

    # 有些情况可以防止死锁
    CELERYD_FORCE_EXECV = True

    # 设置并发的 worker 数量
    CELERYD_CONCURRENCY = 4

    # 允许重试
    CELERY_ACKS_LATE = True

    # 每个 worker 最多执行 100 个任务被销毁，可是防止内存泄漏
    CELERYD_MAX_TASKS_PER_CHILD = 100

    #单个任务的最大运行时间
    CELERYD_TASK_TIME_LIMIT = 12 * 30

    # 定时任务
    CELERYBEAT_SCHEDULE = {
        'task1': {
            'task': 'course_task',
            'schedule': timedelta(seconds=5),
             # 'args': ()
            'options': {
                'queue': 'beat_tasks'
            }
        }
    }
  #+END_SRC

  在 app 中注册 djcelery 在 setting.py 中增加
  #+BEGIN_SRC python
    #celery
    from .celeryconfig import *  #使 celeryconfig 和 setting 联系
    # redis 配置
    BROKER_BACKEND = 'redis' 
    BROKER_URL = 'redis://localhost:6379/1'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'
  #+END_SRC

  在应用下创建 task.py 文件
  #+BEGIN_SRC python
    import time

    from celery.task import Task


    class CourseTask(Task):
        name = 'course_task'

        def run(self, *args, **kwargs):
            print('start course task')
            time.sleep(4)
            print('args={}, kwargs={}'.format(args, kwargs))
            print('end course task')
  #+END_SRC

  在 views 中
  #+BEGIN_SRC python
    from django.http import JsonResponse

    from blog.tasks import CourseTask


    def do(request):
        # 执行异步
        print('start do request')
        CourseTask.delay()
        print('end do request')
        return JsonResponse({'result': 'ok'})
  #+END_SRC

  配置 url 访问 views
  运行时 python managge.py runserver,   python manage.py celery worker -l INFO
  运行定时任务要加上  python manage.py celery beat -l INFO
