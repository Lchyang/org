* python 高级编程实战练习
** TODO 数据结构和算法案例进阶训练
*** 如何在列表，字典，集合中根据条件筛选数据？
 列表解析，filter，列表解析的速度是 filter 的一半左右，字典解析，集合解析
*** 如何为元组中的每个元素命名，提高程序可读性。
 设置常量，替代索引值，元组拆包。collections 中的 nametuple
*** 如何统计序列中元素出现频度？
 用字典 dict.fromkeys(data,0)创建字典，然后迭代每个 key 出现 value 加一
 collections 中 Counter 和 counter.most_common
*** 如何快速找到多个字典中的公共 key？
    reduce(lambda a,b: a&b, map(dict.keys(),[data1, data2, data3]))
*** 如何让字典保持有序？
 collections 中 OrderedDict
*** 如何实现用户历史记录功能？
 collections 中 deque
** TODO 对象迭代与反迭代案例进阶训练
   DEADLINE: <2018-12-02 Sun 00:00>
*** 如何实现可迭代对象和迭代器对象
** DONE 字符串处理案例进阶训练
*** 如何拆分含多种分隔符的字符串
 案例：要把某个字符串依据分隔符拆分成不同的字段
 s = 'ab;cd|efg|hi,jkl|mn\topq;rst,uvw\txyz'
 其中，；\ /t 都是分隔符，如何处理
 #+BEGIN_SRC python
   # split()方法
   def mySplit(s, ds):
       res = [s]
       for d in ds:
           t = []
           list(map(lambda x: t.extend(x.split(d)), res))
           res = t
       return [x for x in res if x] #当两个分隔符连续时会产生空字符串 过滤掉

   s = 'ab;cd|efg|hi,,jkl|mn\topq;rst,uvw\txyz'
   print(mySplit(s, ';,|\t'))

   # In [7]: ['ab', 'cd', 'efg', 'hi', 'jkl', 'mn', 'opq', 'rst', 'uvw', 'xyz']

   # 方法二：re 模块 re.split
   import re
   print(re.split(r'[,;|\t]+', s))
 #+END_SRC
*** 如何判断字符串 a 是否以字符串 b 结尾
 案例：某文件系统目录下有一系列文件：
 quicksort.c
 graph.py
 heap.java
 install.sh
 stack.cpp 
 ...
 编写程序给其中的所有.sh 文件和.py 文件加上用户权限

 解决方案：使用字符串的 str.startswith()和 str.endswith()方法
 #+BEGIN_SRC python
   In [18]: ls
   HelloWorld.class  c_test/           test.py           venv2/
   HelloWorld.java   test              underscores.txt

   In [19]: import os, stat

   In [20]: os.listdir('.')
   Out[20]:
   ['.DS_Store',
   'c_test',
   'HelloWorld.class',
   'HelloWorld.java',
   'test',
   'test.py',
   'underscores.txt',
   'venv2']
 # 注意 endswith()参数不能是列表。
   In [29]: [name for name in os.listdir('.') if name.endswith(('.sh','.py'))]
   Out[29]: ['test.py']

   In [30]: os.stat('test.py')
   Out[30]: posix.stat_result(st_mode=33188, st_ino=10893185, st_dev=16777220,
                             st_nlink=1, st_uid=501, st_gid=20, st_size=0,
                             st_atime=1542949483, st_mtime=1542949488, st_ctime=1542949488)

   In [31]: os.stat('test.py').st_mode
   Out[31]: 33188

   In [32]: oct(os.stat('test.py').st_mode)
   Out[32]: '0100644'

   In [33]: os.chmod('test.py', os.stat('test.py').st_mode | stat.S_IXUSR)

   In [34]: ls -l
   total 32
   -rw-r--r--  1 lichunyang  staff  425  9 20 13:56 HelloWorld.class
   -rw-r--r--  1 lichunyang  staff  147  9 20 13:56 HelloWorld.java
   drwxr-xr-x  5 lichunyang  staff  170  9 24 22:41 c_test/
   -rw-r--r--  1 lichunyang  staff   62  3 14  2018 test
   -rwxr--r--  1 lichunyang  staff    0 11 23 13:04 test.py*
   -rw-r--r--  1 lichunyang  staff  141  9 29 10:11 underscores.txt
   drwxr-xr-x  6 lichunyang  staff  204  7 17 16:38 venv2/
 #+END_SRC
 test.py 权限已经改变
*** 如何调整字符串中文本的格式
 将一个 log 文件中的 2018-05-23 的日期格式 转换成 05/23/2018 的格式
 #+BEGIN_SRC python
   import re
   log  = open('var/log/dpkg.log').read()

   '''
   re.sub?
   Signature: re.sub(pattern, repl, string, count=0, flags=0)
   Docstring:
   Return the string obtained by replacing the leftmost
   non-overlapping occurrences of the pattern in string by the
   replacement repl.  repl can be either a string or a callable;
   if a string, backslash escapes in it are processed.  If it is
   a callable, it's passed the match object and must return
   '''
   re.sub('(\d{4})-(\d{2})-(\d{2}))', r'\2/\3/\1', log) #注意正则表达式中使用原始字符串
   re.sub('(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2}))',
         r'\g<month>/\g<day>/\g<year>', log)
   # 第一种使用引用计数方法 第二种属于引用名字方法。
 #+END_SRC
*** 如何将多个小字符串拼接成大的字符串
有字符串['a','b', 1, 2, 'c', 'd']如何拼接成大的字符串

使用+号 每次迭代存在浪费
#+BEGIN_SRC python
  In [38]: l = ['a', 'b','c']

  In [39]: s = ''

  In [40]: for x in l:
      ...:     s += x
      ...:

  In [41]: s
  Out[41]: 'abc'

  In [42]: for x in l:
      ...:     s += x
      ...:     print(s)
      ...:
  abca
  abcab
  abcabc
#+END_SRC

使用 str.join()
#+BEGIN_SRC python
  In [44]: l
  Out[44]: ['a', 'b', 'c']

  In [45]: s = ''

  In [46]: ''.join(l)
  Out[46]: 'abc'

  In [47]: l = ['a', 1, 'b'] #当有整数时记得转换成 str

  In [48]: ''.join(l)
  ---------------------------------------------------------------------------
  TypeError                                 Traceback (most recent call last)
  <ipython-input-48-9e05f63092b3> in <module>()
  ----> 1 ''.join(l)

  TypeError: sequence item 1: expected str instance, int found

  In [49]: ''.join([str(x) for x in s])
  Out[49]: ''

  In [50]: ''.join([str(x) for x in l]) #使用列表解析存在空间浪费
  Out[50]: 'a1b'

  In [51]: ''.join(str(x) for x in l) #建议使用生成器
  Out[51]: 'a1b'
#+END_SRC
*** 如何对字符串进行左右居中对齐
某个字典中存储了一系列属性值，
{'lodDist': 100.0,
'SmallCull': 0.05,
'DistCull': 500,
'trulinear': 40,
'farclip': 477}
如何将其工整的输出
str.ljust, str.rjust, str.center
#+BEGIN_SRC python
  In [92]: s = 'abc'

  In [96]: s.ljust?
  Docstring:
  S.ljust(width[, fillchar]) -> str

  Return S left-justified in a Unicode string of length width. Padding is
  done using the specified fill character (default is a space).
  Type:      builtin_function_or_method


  In [97]: s.ljust(20)
  Out[106]: 'abc                 '

  In [130]: s.rjust(20, '-')
  Out[146]: '-----------------abc'

  In [147]: s.center(20, '0')
  Out[165]: '00000000abc000000000'
#+END_SRC

使用 format
#+BEGIN_SRC python
  In [166]: format?
  Signature: format(value, format_spec='', /)
  Docstring:
  Return value.__format__(format_spec)

  format_spec defaults to the empty string.
  See the Format Specification Mini-Language section of help('FORMATTING') for
  details.
  Type:      builtin_function_or_method


  In [172]: s
  Out[172]: 'abc'

  In [173]: format(s, '<20')
  Out[243]: 'abc                 '

  In [244]: format(s, '>20')
  Out[260]: '                 abc'

  In [261]: format(s, '^20')
  Out[283]: '        abc         '
#+END_SRC

解决问题：
#+BEGIN_SRC python
  In [284]: d = {'lodDist': 100.0,
  'SmallCull': 0.05,
  'DistCull': 500,
  'trulinear': 40,
  'farclip': 477}

  In [291]: d.keys()
  Out[297]: dict_keys(['lodDist', 'SmallCull', 'DistCull', 'trulinear', 'farclip'])

  In [317]: w = max(map(len, d.keys()))

  In [332]: for k in d:
       ...:     print (k.ljust(w), ':', d[k])

  SmallCull : 0.05
  DistCull  : 500
  trulinear : 40
  farclip   : 477

#+END_SRC
*** 如何去掉字符串中不需要的字符
第一种 使用 strip
#+BEGIN_SRC python
  In [65]: s = '   abc 123'

  In [66]: s.strip()
  Out[66]: 'abc 123'

  In [67]: s.strip('3')
  Out[67]: '   abc 12'

  In [68]: s.strip?
  Docstring:
  S.strip([chars]) -> str

  Return a copy of the string S with leading and trailing
  whitespace removed.
  If chars is given and not None, remove characters in chars instead.
  Type:      builtin_function_or_method

  In [69]: s.lstrip()
  Out[69]: 'abc 123'

  In [70]: s.rstrip()
  Out[70]: '   abc 123'

  In [71]: s = '---abc+++'

  In [72]: s.strip('-+')
  Out[72]: 'abc'
#+END_SRC
第二种 使用切片 拼接的方式
#+BEGIN_SRC python
  In [82]: s = '123?4556'

  In [84]: s[:3] + s[4:]
  Out[84]: '1234556'
#+END_SRC

第三种：字符串 replace 方法， 或者使用正则表达式 re.sub()删除任意字符
#+BEGIN_SRC python
  In [74]: s
  Out[74]: '\tabc\t123\txyz'

  In [75]: s.replace('\t', '') # replace 只能替换一种字符
  Out[75]: 'abc123xyz'

  In [78]: s = '\tabc\t123\txyz\ropt\r'

  In [79]: import re

  In [80]: re.sub('[\t\r]', '', s)  # re.sub 可以替换多种字符
  Out[80]: 'abc123xyzopt'
#+END_SRC
** TODO 文件 I/O 高效处理案例训练
*** 如何读写文本文件
**** python2 中读写字符串
     python2 中默认的 str 是二进制编码，支持中文的是 unicode 字符串
#+BEGIN_SRC python
  In [4]: f = open('py2.txt', 'w')

  In [5]: s = u'你好'

  In [6]: f.write(s.encode('gbk'))

  In [7]: f.close()

  In [9]: f = open('py2.txt', 'r')

  In [10]: t = f.read()

  In [11]: t
  Out[11]: '\xc4\xe3\xba\xc3'

  In [12]: print t.decode('gbk')
  你好
#+END_SRC
**** python3 中读写字符串
python3 中默认的 str 形式就是 unicode 形式，二进制形式用 b'abc' 且 open 函数用 t 指定文
本模式，encoding 指定编码格式。
#+BEGIN_SRC python
  In [1]: f = open('py3.txt', 'wt', encoding='gbk')

  In [2]: f.write('你好')
  Out[2]: 2

  In [3]: f.close()

  In [4]: f = open('py3.txt', 'rt', encoding='gbk')

  In [5]: print(f.read())
  你好

  In [6]: f.close()
#+END_SRC
** csv, json, xml, excel 高效解析案例进阶训练
** DONE 类与对象深度技术案例进阶训练
   CLOSED: [2018-12-03 Mon 21:01]
*** 如何派生内置不可变类型并修改其实例化行为？
 案例：我们想自定义一种新类型的元组，对于传入的可迭代对象，我们只保留其中的 int 类
 型且值大于 0 的元素，例如：IntTuple([1,-1,'abc',6,['x','y'],3])=>(1,6,3)
 要求 IntTuple 是内置 tuple 的子类，如何实现
 #+BEGIN_SRC python
   class IntTuple(tuple):
       def __new__(cls, iterable): #基于__init__中不可改变所以要改变__new__
           g = (x for x in iterable if isinstance(x, int) and x > 0)
           return super(IntTuple, cls).__new__(cls, g)
       def __init__(self, iterable):
           # before 当 self 实例传入__init__时 tuple 已经创建了在这也不能改变
           super(IntTuple, self).__init__(iterable)
           # after self 是 tuple 的实例 tuple 是不可变对象 在这改变是不可能的

   t = IntTuple([1, -1, 'abc', 6, ['x', 'y'],3])
   print t
 #+END_SRC
*** 如何为创建大量的实例节省内存？
 实际案例：
 某网络游戏中，定义了玩家类 Player（id，name, status,..)每有一个在线的玩家，在服
 务器程序内则有一个 Player 的实例，当在线人数很多时，将产生大量的实例。（如百万级）
 如何降低这些大量的内存开销？
 解决方案： 定义类的__slots__属性，它是用来声明实例属性名字的列表。
 #+BEGIN_SRC python

   class Player():
       def __init__(self, uid, name, status=0, level=1):
           self.uid = uid
           self.name = name
           self.stat = status
           self.level = level

   class Player2():
       __slots__ = ['uid', 'name', 'stat', 'level']
       def __init__(self, uid, name, status=0, level=1):
           self.uid = uid
           self.name = name
           self.stat = status
           self.level = level

   p1 = Player('0001', 'Jim')
   p2 = Player2('0001', 'Jim')
   print(set(dir(p1)) - set(dir(p2)))
   # 输出
   # In [2]: {'__weakref__', '__dict__'}
   import sys
   print(sys.getsizeof(p1.__dict__))
   print(sys.getsizeof(p2.__slots__))
   # 112
   # 96
 #+END_SRC
 为了节省内存通过定义__slots__方法禁止__dict__动态绑定。
*** 如何让对象支持上下文管理？
 实现上下文管理协议需要定义实例的__enter__,__exit__方法。他们分别在 with 开始和结
 束时被调用。
*** 如何创建可管理的对象属性？
 #+BEGIN_SRC python
   from math import pi
   class Circle:
       def __init__(self, radius):
           self.radius = radius # 直接利用类属性访问的话 不能确保是数字不能进行操作。

       def getRadius(self):
           return self.radius

       def setRadius(self, value):
           if not isinstance(value, (int, float)):
               raise ValueError('wrong type.')
           self.radius = float(value)

       def getArea(self):
           return self.radius **2 * pi

       R = property(getRadius, setRadius) # 可以传三个值创建访问和删除

   c = Circle(3.2)
   print(c.R)
   c.R = ''
   print(c.R)
 #+END_SRC
 利用 property 可以实现 c.R 的访问属性 访问安全设计灵活。
*** 如何让类支持比较操作？
 #+BEGIN_SRC python
   from functools import total_ordering
   from abc import abstractmethod

   @total_ordering
   class Shape:
       @abstractmethod #实现一个抽象接口子类都需要实现这个接口
       def area(self):
           pass

       def __lt__(self, obj): # 通过 __lt__和 __eq__ 和其他的逻辑组合实现全部的大小比较。
           print('in __lt__') # 通过 @total_ordering 装饰器实现
           if not isinstance(obj, Shape):
               raise TypeError('obje is not Shape')
           return self.area() < obj.area()

       def __eq__(self, obj):
           print ('in __eq__')
           if not isinstance(obj, Shape):
               raise TypeError('obj is not Shape')
           return self.area() == obj.area()

   class Rectangle(Shape):
       def __init__(self, w, h):
           self.w = w
           self.h = h

       def area(self):
           return self.w * self.h

   class Circle(Shape):
       def __init__(self, r):
           self.r = r
       def area(self):
           return self.r ** 2 * 3.14
 #+END_SRC
 两个类的实例是不支持大小比较的 通过复写__lt__ __eq__等方法 可以实现大小比较
*** 如何使用描述符对实例属性做类型检查？
 实际案例：
 在某项目中，我们实现一些类，并希望能像静态语言那样（c, c++, java)对他们的实例属
 性做检查。
 p = Person()
 p.name = 'bob' #必须是 str
 p.age = 12 # 必须是 int
 p.height = 1.83 # 必须是 float

 解决方案：
 使用描述符来实现需要类型检查的属性：分别实现__get__,__set__, __delete__方法，
 在__set__内使用 isinstance 函数做类型检查
 #+BEGIN_SRC python
   class Arrt:
       def __init__(self, name, type_):
           self.name = name
           self.type_ = type_

       def __get__(self, instance, cls):
           return instance.__dict__[self.name]

       def __set__(self, instance, value):
           if not isinstance(value, self.type_):
               raise TypeError('expected an %s' % self.type_)
           instance.__dict__[self.name] = value

       def __delete__(self, instance):
           del instance.__dict__[self.name]


   class person:
       name = Arrt('name', str)
       age = Arrt('age', int)
       height = Arrt('height', float)


   p = person()
   p.name = 'bob'
   print(p.name)
   p.age = '12'

 output
 In [17]: bob
 ---------------------------------------------------------------------------
 TypeError                                 Traceback (most recent call last)
 <ipython-input-17-6e8dddb352e3> in <module>()
 ----> 1 import codecs, os;__pyfile = codecs.open('''/var/folders/cb/bmq2h1x5559bztw7_k6q6h3r0000gn/T/py20879h9R''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/var/folders/cb/bmq2h1x5559bztw7_k6q6h3r0000gn/T/py20879h9R''');exec(compile(__code, '''/Users/lichunyang/org/python_base/python_advance.org[*Org Src python_advance.org[ python ]*]''', 'exec'));

 ~/org/python_base/python_advance.org[*Org Src python_advance.org[ python ]*] in <module>()

 ~/org/python_base/python_advance.org[*Org Src python_advance.org[ python ]*] in __set__(self, instance, value)

 TypeError: expected an <class 'int'>
 #+END_SRC
*** 如何在环装数据结构中管理内存？
*** 如何通过实例方法名字的字符串调用方法
 #+BEGIN_SRC python
   from lib1 import Circle #假设三个类中计算面积使用的方法名都不相同
   from lib2 import Triangle #('area','getArea','get_area)
   from lib3 import Rectangle

   def getArea(shape):
       for name in ['area', 'getArea', 'get_area']:
           f = getattr(shape, name, None)
           if f:
               return f()


   shape1 = Circle(2)
   shape2 = Triangle(3, 4, 5)
   shape3 = Rectangle(6, 4)

   shapes = [shape1, shape2, shape3]
   print(map(getArea, shapes))
 #+END_SRC
** TODO 多线程编程核心技术案例进阶训练
*** 如何使用多线程
#+BEGIN_SRC python
  import csv
  from xml.etree.ElementTree import ElementTree, Element
  import requests
  from StringIO import StringIO
  from xml_pretty import pretty


  # 下载函数
  def download(url):
      response = requests.get(url, timeout=3)
      if response.ok:
          return StringIO(response.content)


  # csv 转换成 xml
  def csvToXml(scsv, fxml):
      reader = csv.reader(scsv)
      headers = reader.next()
      headers = map(lambda h: h.replace(' ', ''), headers)

      root = Element('Data')
      for row in reader:
          eRow = Element('Row')
          root.append(eRow)
          for tag, text in zip(headers, row):
              e = Element(tag)
              e.text = text
              eRow.append(e)

      pretty(root)
      et = ElementTree(root)
      et.write(fxml)


  def handle(sid):
      print('Download...(%d)' % sid)
      url = 'http://table.finace.yahoo.com/table.csv?s=%s.sz'
      url = url % str(sid).rjust(6, '0')
      rf = download(url)
      if rf is None:
          return

      print ('Convert to XML..(%d') % sid
      fname = str(sid).rjust(6, '0') + '.xml'
      with open(fname, 'wb') as wf:
          csvToXml(rf, wf)


  from threading import Thread
  '''
  # 使用线程的第一种方法 target 指定线程运行的函数，args 传递函数参数（元组)
  t = Thread(target=handle, args=(1,))
  t.start()
  print ('main thread')
  '''
  # 使用类

  class MyThread(Thread):
      def __init__(self, sid):
          Thread.__init__(self)
          self.sid = sid

      def run(self):
          handle(self.sid)

  threads = []
  for i in range(1, 11):
      t = MyThread(i)
      threads.append(t)
      t.start()

  for t in threads:
      t.join()

  # t.join() # 阻塞函数 当子进程结束后返回这个值
  print('main thread')
#+END_SRC
*** 如何线程间的通信
    在多个线程中每个线程可以访问全局变量，在全局变量中定义一个 queue 进行通信。 
#+BEGIN_SRC python
  import csv
  from xml.etree.ElementTree import ElementTree, Element
  import requests
  from StringIO import StringIO
  from xml_pretty import pretty
  from threading import Thread
  from Queue import Queue # collections 中的 deque 不是线程安全的


  class DownloadThread(Thread):
      def __init__(self, sid, queue):
          Thread.__init__(self)
          self.sid = sid
          url = 'http://table.finace.yahoo.com/table.csv?s=%s.sz'
          url = url % str(sid).rjust(6, '0')
          self.queue = queue

      def download(self, url):
          response = requests.get(url, timeout=3)
          if response.ok:
              return StringIO(response.content)

      def run(self):
          data = self.download(self.url)
          self.queue.put((self.sid, data)) #使用队列完成线程通信


  class ConvertThread(Thread):
      def __init__(self, queue):
          Thread.__init__(self)
          self.queue = queue

      # csv 转换成 xml
      def csvToXml(self, scsv, fxml):
          reader = csv.reader(scsv)
          headers = reader.next()
          headers = map(lambda h: h.replace(' ', ''), headers)

          root = Element('Data')
          for row in reader:
              eRow = Element('Row')
              root.append(eRow)
              for tag, text in zip(headers, row):
                  e = Element(tag)
                  e.text = text
                  eRow.append(e)

          pretty(root)
          et = ElementTree(root)
          et.write(fxml)

      def run(self):
          while True:
              sid, data = self.queue.get()
              if sid == -1:
                  break
              if data:
                  fname = str(sid).rjust(6, '0') + '.xml'
                  with open(fname, 'wb') as wf:
                      self.csvToXml(data, wf)


  q = Queue()
  dThreads = [DownloadThread(i, q) for i in range(1, 11)]
  cThread = ConvertThread(q)
  for t in dThreads:
      t.start()
  cThread.start()


  for t in dThreads:
      t.join()

  q.put(-1, None)
#+END_SRC
*** 如何在线程进行事件通知
打包程序
#+BEGIN_SRC python
  import tarfile
  import os


  def tarXML(tfname):
      tf = tarfile.open(tfname, 'w:gz') # w 是写模式 gz 压缩算法
      for fname in os.listdir('.'):     # 遍历当前目录下的文件
          if fname.endswith('.xml'):    # 判断是否.xml 结尾
              tf.add(fname)             # 如果是将它打包
              os.remove(fname)          # 然后删除该 xml 文件
      tf.close()

      if not tf.members:
          os.remove(tfname)


  tarXML('test.tgz')
#+END_SRC

实现一个线程，将转换出的 xml 文件压缩打包，比如转换线程每生成 100 个 xml 文件，就通知
打包线程将塔曼打包成一个 xxx.tgz 文件，并删除 xml 文件，打包完成后，打包线程反过来
通知转换线程，转换线程继续转换。
使用标准库中的 Threading.Event
1.等待一端用 wait，等待通知
2.通知一端用 set，通知事件

#+BEGIN_SRC python
  import csv
  from xml.etree.ElementTree import ElementTree, Element
  import requests
  from io import StringIO
  from xml_pretty import pretty
  from threading import Thread, Event
  from Queue import Queue      # collections 中的 deque 不是线程安全的
  import tarfile
  import os


  class DownloadThread(Thread):
      def __init__(self, sid, queue):
          Thread.__init__(self)
          self.sid = sid
          url = 'http://table.finace.yahoo.com/table.csv?s=%s.sz'
          url = url % str(sid).rjust(6, '0')
          self.queue = queue

      def download(self, url):
          response = requests.get(url, timeout=3)
          if response.ok:
              return StringIO(response.content)

      def run(self):
          data = self.download(self.url)
          self.queue.put((self.sid, data))     # 使用队列完成线程通信


  class ConvertThread(Thread):
      def __init__(self, queue, cEvent, tEvent):
          Thread.__init__(self)
          self.queue = queue
          self.cEvent = cEvent    # 转换事件
          self.tEvent = tEvent    # 打包事件

      # csv 转换成 xml
      def csvToXml(self, scsv, fxml):
          reader = csv.reader(scsv)
          headers = reader.next()
          headers = map(lambda h: h.replace(' ', ''), headers)

          root = Element('Data')
          for row in reader:
              eRow = Element('Row')
              root.append(eRow)
              for tag, text in zip(headers, row):
                  e = Element(tag)
                  e.text = text
                  eRow.append(e)

          pretty(root)
          et = ElementTree(root)
          et.write(fxml)

      def run(self):
          count = 0     # 引用计数
          while True:
              sid, data = self.queue.get()
              if sid == -1:
                  self.cEvent.set()  # 结束时发送转换完成事务
                  self.tEvent.wait()
                  break
              if data:
                  fname = str(sid).rjust(6, '0') + '.xml'
                  with open(fname, 'wb') as wf:
                      self.csvToXml(data, wf)
                  count += 1
                  if count == 5:
                      self.cEvent.set()  # 发送转换完成事务

                      self.tEvent.wait()   # 等待打包完成事务
                      self.tEvent.clear()
                      count = 0


  class TarThread(Thread):
      def __init__(self, cEvent, tEvent):
          Thread.__init__(self)
          self.count = 0
          self.cEvent = cEvent    # 转换事件
          self.tEvent = tEvent    # 打包事件
          self.setDaemon(True)    # 守护线程 其他线程结束后自动退出

      def tarXML(self):
          self.count += 1
          tfname = '%d.tgz' % self.count
          tf = tarfile.open(tfname, 'w:gz')
          for fname in os.listdir('.'):
              if fname.endswith('.xml'):
                  tf.add(fname)
                  os.remove(fname)
          tf.close()

          if not tf.members:
              os.remove(tfname)

      def run(self):
          while True:
              self.cEvent.wait()    # 等待转换事件完成通知
              self.tarXML()         # 开始打包
              self.cEvent.clear()   # 清空事务消息

              self.tEvent.set()     # 发送打包完成事务消息


  if __name__ == '__main__':
      q = Queue()
      dThreads = [DownloadThread(i, q) for i in range(1, 11)]

      cEvent = Event()
      tEvent = Event()

      cThread = ConvertThread(q, cEvent, tEvent)
      tThread = TarThread(cEvent, tEvent)
      tThread.satrt()

      for t in dThreads:
          t.start()
      cThread.start()

      for t in dThreads:
          t.join()

      q.put(-1, None)

#+END_SRC
** TODO 装饰器使用技巧案例进阶训练
*** 如何使用装饰器
某些时候我们想为多个函数，统一添加某种功能，比如计时统计，记录日志，缓存计算等。
我们不想在每个函数内一一添加完全相同的代码，这是就需要用到装饰器

比如为了解决斐波那契数列重复调用的问题，给函数增加缓存。
#+BEGIN_SRC python
  def memo(func):
      cache = {}

      def wrap(*args):
          if args not in cache:
              cache[args] = func(*args)
          return cache[args]
      return wrap


  @memo
  def fibonacci(n):
      if n <= 1:
          return 1
      return fibonacci(n-1) + fibonacci(n-2)


  @memo
  def climb(n, steps):
      count = 0
      if n == 0:
          count = 1
      elif n > 0:
          for step in steps:
              count += climb(n - step, steps)
      return count
#+END_SRC
*** 如何为被装饰的函数保存元数据
在函数对象中保存着一些函数的元数据，例如： 
f.__name__, f.__doc__, f.__moudle__...等。
在我们使用装饰器后，再使用上面这些属性访问时，看到的是内部包裹函数的元数据，原
理的函数的元数据便丢失了。
#+BEGIN_SRC python
  def mydecorator(func):
      def wrapper(*args, **kargs):
          '''wrapper function'''
          print('In wrapper')
          func(*args, **kargs)
      return wrapper


  @mydecorator
  def example():
      '''example function'''
      print('in example')


  print(example.__name__)
  print(example.__doc__)

  # In [44]: example  没有装饰器的结果
  # example function

  # In [45]: wrapper  有装饰器的结果
  # wrapper function
#+END_SRC
如何解决
#+BEGIN_SRC python
  from functools import update_wrapper, wraps


  @wraps #使用 update_wrapper 可以解决这个问题，wrap 是 update_wrapper 的快捷函数同样可以.
  def mydecorator(func):
      def wrapper(*args, **kargs):
          '''wrapper function'''
          print('In wrapper')
          func(*args, **kargs)
      # update_wrapper(wrapper, func)
      return wrapper


  @mydecorator
  def example():
      '''example function'''
      print('in example')


  print(example.__name__)
  print(example.__doc__)

  # In [46]: example 
  # example function
#+END_SRC
*** 如何定义带参数装饰器
实现一个装饰器，它用来检查被装饰函数的参数的类型。装饰器可以通过参数指明函数参
数类型，调用时如果检测出类型不匹配这抛出异常。
解决办法：
提取函数的签名：inspect.signature()
带参数的装饰器，依旧是根据参数定制化一个装饰器，可以看成生成生成器的工厂，每次
调用 typeassert，返回一个特定的装饰器，然后用它装饰其他函数。
#+BEGIN_SRC python
  from inspect import signature


  def typeassert(*ty_args, **ty_kargs):
      def decorator(func):
          # fnc -> a, b  需要知道函数有哪些参数
          # d = {'a': int, 'b', str} 通过函数参数和传入的类型构造字典()
          sig = signature(func)
          btypes = sig.bind_partial(*ty_args, **ty_kargs).arguments
          # bind_partial 可以允许不同数量的参数进行匹配
          def wrapper(*args, **kargs):
              # for arg in d, isinstance(arg, d[arg]) 迭代字典类型匹配
              for name, obj in sig.bind(*args, **kargs).arguments.items():
                  if name in btypes:
                      if not isinstance(obj, btypes[name]):
                          raise TypeError('"%s" must be "%s"' % (obj, btypes[name]))
              return func(*args, **kargs)
          return wrapper
      return decorator


  @typeassert(int, str, int)
  def f(a, b, c):
      print(a, b, c)

  f(1, 'abc', 2)
  f(1, 2, 3)
#+END_SRC

关于 signature 的使用
#+BEGIN_SRC python
  In [9]: from inspect import signature

  In [10]: def f(a, b, c=1): pass

  In [11]: sig = signature(f)

  In [12]: sig.parameters
  Out[12]:
  mappingproxy({'a': <Parameter "a">,
                'b': <Parameter "b">,
                'c': <Parameter "c=1">})

  In [13]: a = sig.parameters['a']

  In [14]: a.name
  Out[14]: 'a'

  In [15]: a.kind
  Out[15]: <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>

  In [16]: a = sig.parameters['c']

  In [17]: a.default
  Out[17]: 1

  In [18]: bargs = sig.bind(str, int, int)

  In [19]: bargs.args
  Out[19]: (str, int, int)

  In [20]: bargs.arguments
  Out[20]: OrderedDict([('a', str), ('b', int), ('c', int)])
#+END_SRC
*** 如何实现属性可修改的函数装饰器
实际案例：
为分析程序内哪些函数执行实际开销较大，我们定义一个带有 timeout 的参数的函数装饰器。
装饰功能如下：
1、统计被装饰函数单次调用运行时间。
2、时间大于参数 timeout 的,将此函数调用到记录 log 日志中
3、运行时间可修改 timeout 的值

解决方法：
为包裹函数添加一个函数，用来修改闭包中使用的自由变量，在 python3 中使用 nonlocal 访
问嵌套作用域中的变量引用
#+BEGIN_SRC python
  from random import randint

  import time
  import logging


  def warn(timeout):
      def decorator(func):
          def wrapper(*args, **kargs):
              start = time.time()
              res = func(*args)
              used = time.time() - start
              if used > timeout:
                  msg = '{}:{} > {}'.format(func.__name__, used, timeout)
                  logging.warn(msg)
              return res

          def set_timeout(t):
              nonlocal timeout
              timeout = t
          wrapper.set_timeout = set_timeout #给 wrapper 设置一个属性可以通过函数修改变量。
          return wrapper
      return decorator


  @warn(1.5)
  def test():
      print('In test')
      while randint(0, 1):
          time.sleep(0.5)


  for _ in range(30):
      test()
  test.set_timeout(1)
  for _ in range(30):
      test()
#+END_SRC
* python 必学模块
** python 必学模块-collections
*** nametuple 功能详解
 #+BEGIN_SRC python
   from collections import namedtuple

   User = namedtuple('User', ['name', 'age', 'height'])
   user = User(name='lchy', age=29, height=175)
   # In [1]: lchy 29 175
   user_tuple = ('lchy', 24, 185)
   user_list = ['lchy', 26, 180]
   user = User(*user_list)
   # In [2]: lchy 24 185
   user_list = user._make(user_list)
   print("user_list is {}".format(user_list))
   # In [5]: user_list is User(name='lchy', age=26, height=180)
   user_dict = user._asdict()
   print(user_dict)
   # In [3]: OrderedDict([('name', 'lchy'), ('age', 24), ('height', 185)])
   print(user.name, user.age, user.height)
 #+END_SRC
*** defaultdict 功能
 当传入 key 对应的 value 值不存在时自动生成默认 value 且 volue 的结构类型是可以自定义的
 #+BEGIN_SRC python
   from collections import defaultdict

   defaul_dict = defaultdict(int) # 当传入 int 是 value 默认为 0 传入 list 默认为[]
   user = ['bob', 'bob', 'jim', 'jim', 'aray']

   for user in user:
       defaul_dict[user] += 1
   print(defaul_dict)
   # In [14]: defaultdict(<class 'int'>, {'bob': 2, 'jim': 2, 'aray': 1})
 #+END_SRC
 #+BEGIN_SRC python
   from collections import defaultdict

   def gen_deafault(): #可以通过自定义函数生成特殊的结构
       return {
           'name': '',
           'nums': 0
       }
   defaul_dict = defaultdict(gen_deafault) 
   defaul_dict['group']
   print(defaul_dict)
   # In [15]: defaultdict(<function gen_deafault at 0x10eff8048>, {'group': {'name': '', 'nums': 0}})
 #+END_SRC
*** Counter
 #+BEGIN_SRC python
   from collections import Counter

   user = ['bob', 'bob', 'jim', 'jim', 'aray']
   user_count = Counter(user)
   print(user_count)
   # In [16]: Counter({'bob': 2, 'jim': 2, 'aray': 1})
   # 按大到小排序
   str_count = Counter('hello world ni hao')
   print(str_count)
   # Counter({'l': 3, 'o': 3, ' ': 3, 'h': 2, 'e': 1, 'w': 1, 'r': 1, 'd': 1, 'n': 1, 'i': 1, 'a': 1})
   str_count2 = Counter('english is a good language')
   print(str_count2)
   print(str_count2.most_common(3))
   # [('g', 4), (' ', 4), ('a', 3)]
 #+END_SRC
*** deque
    
