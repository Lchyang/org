* drf 
** 利用djnago view 序列化数据
 #+BEGIN_SRC python
   from django.views.generic.base import View

   class GoodListView(View):
       def get(self, request):
           json_list = []
           goods = Goods.objects.all()
           for good in goods:
               json_dict = {}
               json_dict["name"] = good.name
               json_dict["category"] = good.category.name
               json_list.append(json_dict)

           from django.http import HttpResponse
           import json
           return HttpResponse(json.dumps(json_list), content_type='application/json')
 #+END_SRC
 这样做的缺点, 工作量大而且容易出错,当有时间类型时json.dumps会出错

 改善 但是image time 还是不能序列化
 #+BEGIN_SRC python
   from django.forms.models import model_to_dict

   for good in goods:
       joon_dict = model_to_dict(good)
       json_list.append(json_dict)
 #+END_SRC

 改善 为什么用json.loads因为HttpRespoinse里面有json.dumps了.
 #+BEGIN_SRC python
 from django.core import serizlizers
 json_data = serizlizers.serizlizers("json", goods)
 json_data = json.loads(json_data)

 from django.http import JsonResponse
 return JsonResponse(json_data, safe=False)
 #+END_SRC
 django 还提供了返回json的方法
** drf ApiView方法 *** 使用 drf文档 #+BEGIN_SRC python from rest_framework.documentation import include_docs_urls urlpatterns = [rul(r'docs/', include_docs_url(title="b"))] #+END_SRC If you're intending to use the browsable API you'll probably also want to add REST framework's login and logout views. Add the following to your root urls.py file.drf 登录配置 #+BEGIN_SRC python urlpatterns = [... url(r'^api-auth/', include('rest_framework.urls'))] #+END_SRC *** 使用 drf serializer 我们需要开始使用Web API的第一件事是提供一种将代码段实例序列化和反序列化为表示形式（如json）的方法。 我们可以通过声明与Django表单非常相似的序列化器来完成此操作。 在名为serializers.py的snippets目录中创建一个文件，并添加以下内容 #+BEGIN_SRC python from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): """ Create and return a new `Snippet` instance, given the validated data. """ return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): """ Update and return an existing `Snippet` instance, given the validated data. """ instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance #+END_SRC more read http://www.django-rest-framework.org/tutorial/1-serialization/ view层 Response 是drf的 response #+BEGIN_SRC python class GoodsListView(APIView): ''' List all goods ''' def get(self, request, format=None): goods = Goods.objects.all() goods_serializer = GoodSerializer(goods, many=True) return Response(goods_serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() # .save会调用serializer的create方法 return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) #+END_SRC post 方法是当前端有数据添加时可以通过post添加到数据库 *** 使用 model serializer #+BEGIN_SRC python class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') #+END_SRC http://www.django-rest-framework.org/tutorial/1-serialization/ #+BEGIN_SRC python class CategorySerializer2(serializers.ModelSerializer): class Meta: model = GoodsCategory fields = "__all__" class CategorySerializer(serializers.ModelSerializer): sub_cat = CategorySerializer2(many=True) class Meta: model = GoodsCategory fields = "__all__" class GoodsSerializer(serializers.ModelSerializer): category = CategorySerializer() class Meta: model = Goods fields = "__all__" #+END_SRC 如果涉及到多个数据层可以这样做
** drf mixin 和 GenericAPIView
 #+BEGIN_SRC python
 from snippets.models import Snippet
 from snippets.serializers import SnippetSerializer
 from rest_framework import mixins
 from rest_framework import generics

 class SnippetList(mixins.ListModelMixin,
                   mixins.CreateModelMixin,
                   generics.GenericAPIView):
     queryset = Snippet.objects.all()
     serializer_class = SnippetSerializer

     def get(self, request, *args, **kwargs):
         return self.list(request, *args, **kwargs)

     def post(self, request, *args, **kwargs):
         return self.create(request, *args, **kwargs)
 #+END_SRC

 drf mixins.ListModelMixin.list源码
 #+BEGIN_SRC python
 class ListModelMixin(object):
     """
     List a queryset.
     """
     def list(self, request, *args, **kwargs):
         queryset = self.filter_queryset(self.get_queryset())

         page = self.paginate_queryset(queryset)
         if page is not None:
             serializer = self.get_serializer(page, many=True)
             return self.get_paginated_response(serializer.data)

         serializer = self.get_serializer(queryset, many=True)
         return Response(serializer.data)
 #+END_SRC

 drf generics.ListAPIView源码
 #+BEGIN_SRC python
 class ListAPIView(mixins.ListModelMixin,
                   GenericAPIView):
     """
     Concrete view for listing a queryset.
     """
     def get(self, request, *args, **kwargs):
         return self.list(request, *args, **kwargs)
 #+END_SRC
 所以 generics.xxxAPIView 继承的mixins.xxxModelMixin 和 generics里自己的
 GenericAPIView  view 代码简化
 #+BEGIN_SRC python
 class SnippetList(generics.ListAPIView):
     queryset = Snippet.objects.all()
     serializer_class = SnippetSerializer
 #+END_SRC
 如果像配置分页可以直接在setting里面配置
 REST_FRAMEWORK = {
     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
     'PAGE_SIZE': 10,
     'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework.authentication.BasicAuthentication',
         'rest_framework.authentication.SessionAuthentication',
         'rest_framework.authentication.TokenAuthentication',
     )
 }
 可以在 rest_framework de settings.py中看的源码
 [[http://www.django-rest-framework.org/tutorial/3-class-based-views/#using-generic-class-based-views][rest_frame_work]]
 更多的分页设置
 http://www.django-rest-framework.org/api-guide/pagination/
** drf Viewsets
 #+BEGIN_SRC python
 class GenericViewSet(ViewSetMixin, generics.GenericAPIView):
     """
     The GenericViewSet class does not provide any actions by default,
     but does include the base set of generic view behavior, such as
     the `get_object` and `get_queryset` methods.
     """
     pass
 #+END_SRC
 ViewSetMixin重新了asview()方法 定义url时可以
 #+BEGIN_SRC python

 from snippets.views import SnippetViewSet, UserViewSet, api_root
 from rest_framework import renderers

 snippet_list = SnippetViewSet.as_view({
     'get': 'list',
     'post': 'create'
 })
 #+END_SRC
 还可以配合Routers使用
 #+BEGIN_SRC python
 from django.conf.urls import url, include
 from rest_framework.routers import DefaultRouter
 from snippets import views

 # Create a router and register our viewsets with it.
 router = DefaultRouter()
 router.register(r'snippets', views.SnippetViewSet)
 router.register(r'users', views.UserViewSet)

 # The API URLs are now determined automatically by the router.
 urlpatterns = [
     url(r'^', include(router.urls))
 ]
 #+END_SRC
 http://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/
 django rest_frame_work view的具体逻辑和继承关系可以参考 源码generics.py 
 mixins.py viewset.py 三个文件 大致逻辑是generics继承了mixins和自身的类
 viewset继承了generics自身的类 和自己自身的类. 还有其他各种组合参考源码.
* 解决跨域问题
github 搜索 django-cors-headers
* 用户的登录和注册
** 舍弃csrf用法 
前后端分离 本身就可能 前端和后端跨站
** 用drf的TokenAuthentication
#+BEGIN_SRC python
from rest_framework.authtoken import views
urlpatterns += [
    url(r'^api-token-auth/', views.obtain_auth_token)
]
#+END_SRC
** jwt 用户认证
https://www.jianshu.com/p/180a870a308a
