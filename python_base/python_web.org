** 数据库
*** 启动/关闭 mysql 服务 
*** 修改 mysql 提示符
使用 prompt
\D 完整的日期
\d 当前数据库
\h 服务器名称
\u 当前的用户
prompt \u@\h \d>
*** mysql 常用命令及语法规范
SELECT USER();
SELECT VERSION();
SELECT NOW();
- 关键字与函数名称全部大写
- 数据库名称、表名称、字段名称小写
- sql 语句必须以分号结尾
*** 操作数据库(数据库的增删改查)
**** 创建数据库
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [DEFAULT]
CHARACTER SET [=] charest_name
{}里面是必填 []是选填
CREATE DATABASE t1;
CREATE DATABASE IF NOT EXISTS t1; 这是不会报错会产生警告。
SHOW WARNINGS; 查看警告
CHARACTER SET 表示创建数据库使用的编码格式
CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;
**** 修改数据库
ALTER {DATABASE | SCHEMA} [db_name] [DEFAULT] CHARACTER SET [=] charset_name
ALTER DATABASE t2 CHARACTER SET = utf8; 修改数据库的编码格式
SHOW CREATE DATABASE t2;  查看数据库的编码格式
**** 删除数据库
DROP {DATABASE | SCHEMA} [IF EXISTS] db_name
*** 数据类型
数据类型是指列、存储过程参数、表达式和局部变量的数据特征，他决定了数据的存储格
式，代表了不同的信息类型
**** 整型
TINYINT  一个字节 0-255
SMALLINT 两个字节 0-65535
MEDIUMINT 三个字节 0-16777215
INT      四个字节 0-2**32-1
BIGINT   八个字节 0-2**64-1
**** 浮点型
FLOAT[(M,D)] M 是数字总位数，D 是小数点后边的位数。如果省略则根据硬件限制量保存值。
DOUBLE[(M,D)]
**** 日期时间型
YEAR
TIME
DATE
DATETIME
TIMESTAMP
**** 字符型
MySQL 数据类型	含义
char(n)	固定长度，最多 255 个字符
varchar(n)	固定长度，最多 65535 个字符
tinytext	可变长度，最多 255 个字符
text	可变长度，最多 65535 个字符
mediumtext	可变长度，最多 2 的 24 次方-1 个字符
longtext	可变长度，最多 2 的 32 次方-1 个字符

char 和 varchar：
1.char(n) 若存入字符数小于 n，则以空格补于其后，查询之时再将空格去掉。所以 char 类
型存储的字符串末尾不能有空格，varchar 不限于此。
2.char(n) 固定长度，char(4)不管是存入几个字符，都将占用 4 个字节，varchar 是存入的
实际字符数+1 个字节（n<=255）或 2 个字节(n>255)，所以 varchar(4),存入 3 个字符将占用 4 个字节。 
3.char 类型的字符串检索速度要比 varchar 类型的快。

varchar 和 text： 
1.varchar 可指定 n，text 不能指定，内部存储 varchar 是存入的实际字符数+1 个字节
（n<=255）或 2 个字节(n>255)，text 是实际字符数+2 个字节。 
2.text 类型不能有默认值。 
3.varchar 可直接创建索引，text 创建索引要指定前多少个字符。varchar 查询速度快于
text,在都创建索引的情况下，text 的索引似乎不起作用。
**** 枚举型
ENUM('value1','value2',...)
**** set
SET('value1','value2',...) 最多 64 个成员，做所有成员的排列组合。
*** 操作数据表
打开数据库 USE databasename;
SELECT DATABASE(); 显示当前打开数据库
**** 创建数据表
CREATE TABLE [IF NOT EXISTS] table_name(
   column_name data_type,
   ...
);

CREATE TABLE tb1( 
username VARCHAR(20), 
age TINYINT UNSIGNED, 
salary FLOAT(8,2) UNSIGNED
);
**** 查看数据表
SHOW TABLES [FROM db_name] [LIKE 'pattern' | WHERE expr]

SHOW TABLES; 查看当前数据库中的表
SHOW TABLES FROM mysql; 查看其它数据库中的表
**** 查看数据表的结构 
SHOW COLUMNS FROM tbl_name;
SHOW COLUMNS FROM tb1; 查看 tb1 表的结构

root@localhost test>SHOW COLUMNS FROM tb1;
+----------+---------------------+------+-----+---------+-------+
| Field    | Type                | Null | Key | Default | Extra |
+----------+---------------------+------+-----+---------+-------+
| username | varchar(20)         | YES  |     | NULL    |       |
| age      | tinyint(3) unsigned | YES  |     | NULL    |       |
| salary   | float(8,2) unsigned | YES  |     | NULL    |       |
+----------+---------------------+------+-----+---------+-------+
3 rows in set (0.01 sec)
**** mysql 记录的插入与查找
***** 插入记录
INSERT [INFO] tbl_name [(col_name,..)] VALUES (val,..)

root@localhost test>INSERT tb1 VALUES('tom',25,342.23);
Query OK, 1 row affected (0.01 sec)

root@localhost test>SHOW COLUMNS FROM tb1;
+----------+---------------------+------+-----+---------+-------+
| Field    | Type                | Null | Key | Default | Extra |
+----------+---------------------+------+-----+---------+-------+
| username | varchar(20)         | YES  |     | NULL    |       |
| age      | tinyint(3) unsigned | YES  |     | NULL    |       |
| salary   | float(8,2) unsigned | YES  |     | NULL    |       |
+----------+---------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

root@localhost test>INSERT tb1(username, salary) VALUES('john', 450.23);
Query OK, 1 row affected (0.01 sec)
***** 记录的查找
SELECT expr,.. FROM tabl_name;

root@localhost test>SELECT * FROM tb1;
+----------+------+--------+
| username | age  | salary |
+----------+------+--------+
| tom      |   25 | 342.23 |
| john     | NULL | 450.23 |
+----------+------+--------+
2 rows in set (0.00 sec)
**** mysql 的空值与非空
NULL, 字段值可以为空
NOT NULL, 字段值禁止为空

root@localhost test>CREATE TABLE tb2(
    -> username VARCHAR(20) NOT NULL,
    -> age TINYINT UNSIGNED NULL
    -> );
Query OK, 0 rows affected (0.03 sec)

root@localhost test>SHOW COLUMNS FROM tb2;
+----------+---------------------+------+-----+---------+-------+
| Field    | Type                | Null | Key | Default | Extra |
+----------+---------------------+------+-----+---------+-------+
| username | varchar(20)         | NO   |     | NULL    |       |
| age      | tinyint(3) unsigned | YES  |     | NULL    |       |
+----------+---------------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

root@localhost test>INSERT tb2 VALUES('tom', NULL);
Query OK, 1 row affected (0.00 sec)

root@localhost test>SELECT * FROM tb2;
+----------+------+
| username | age  |
+----------+------+
| tom      | NULL |
+----------+------+
1 row in set (0.00 sec)

root@localhost test>INSERT tb2 VALUES(NULL, 22);
ERROR 1048 (23000): Column 'username' cannot be null
**** mysql 自动编号（AUTO_INCREMENT)
自动编号，必须和主键组合使用
默认情况下，起始值为 1， 每次增量为 1
AUTO_INCREMENT 必须和主键一起使用，主键不必须有 AUTO_INCREMENT
**** 主键约束
每张表只能存在一个主键
主键保证记录的唯一性
主键自动为 NOT NULL

root@localhost test>CREATE TABLE tb3(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT KEY,
    -> username VARCHAR(30) NOT NULL
    -> );
Query OK, 0 rows affected (0.02 sec)

root@localhost test>SHOW COLUMNS FROM tb3;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(30)          | NO   |     | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
2 rows in set (0.01 sec)

root@localhost test>INSERT tb3(username) VALUES('tom');
Query OK, 1 row affected (0.01 sec)

root@localhost test>INSERT tb3(username) VALUES('john');
Query OK, 1 row affected (0.00 sec)

root@localhost test>INSERT tb3(username) VALUES('bob');
Query OK, 1 row affected (0.00 sec)

root@localhost test>SELECT * FROM tb3;
+----+----------+
| id | username |
+----+----------+
|  1 | tom      |
|  2 | john     |
|  3 | bob      |
+----+----------+
3 rows in set (0.00 sec)

如果没有 AUTO_INCREMENT 主键得手动赋值。

root@localhost test>CREATE TABLE tb4(
    -> id SMALLINT UNSIGNED KEY,
    -> username VARCHAR(20) NOT NULL
    -> );
Query OK, 0 rows affected (0.03 sec)

root@localhost test>SHOW COLUMNS FROM tb4;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    |       |
| username | varchar(20)          | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

root@localhost test>INSERT tb4(username) VALUES('tom');
ERROR 1364 (HY000): Field 'id' doesn't have a default value
root@localhost test>INSERT tb4 VALUES(2,'tom');
Query OK, 1 row affected (0.00 sec)

root@localhost test>INSERT tb4 VALUES(4,'tom');
Query OK, 1 row affected (0.00 sec)

root@localhost test>SELECT * FROM tb4;
+----+----------+
| id | username |
+----+----------+
|  2 | tom      |
|  4 | tom      |
+----+----------+
2 rows in set (0.00 sec)
**** mysql 初涉唯一约束
唯一约束可以保证记录的唯一性
唯一约束的字段可以为空值（NULL）
每张数据表可以存在多个唯一约束

root@localhost test>CREATE TABLE tb5( 
id SMALLINT UNSIGNED AUTO_INCREMENT KEY, 
username VARCHAR(20) NOT NULL UNIQUE KEY, 
age TINYINT UNSIGNED);
Query OK, 0 rows affected (0.02 sec)

root@localhost test>SHOW COLUMNS FROM tb5;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)          | NO   | UNI | NULL    |                |
| age      | tinyint(3) unsigned  | YES  |     | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

root@localhost test>INSERT tb5(username,age) VALUES('Tom',22);
Query OK, 1 row affected (0.00 sec)

root@localhost test>INSERT tb5(username,age) VALUES('Tom',22);
ERROR 1062 (23000): Duplicate entry 'Tom' for key 'username'
唯一约束，字段的 key 不可以重复
**** 初涉默认约束
当插入记录时，如果没有明确的字段赋值，则自动赋予默认值。 
root@localhost test>CREATE TABLE tb6(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT KEY,
    -> username VARCHAR(20) NOT NULL UNIQUE KEY,
    -> sex ENUM('1','2','3') DEFAULT '3'
    -> );
Query OK, 0 rows affected (0.02 sec)

root@localhost test>SHOW COLUMNS FROM tb6;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)          | NO   | UNI | NULL    |                |
| sex      | enum('1','2','3')    | YES  |     | 3       |                |
+----------+----------------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

root@localhost test>INSERT tb6(username) VALUES('Tom');
Query OK, 1 row affected (0.00 sec)

root@localhost test>SELECT * FROM tb6;
+----+----------+------+
| id | username | sex  |
+----+----------+------+
|  1 | Tom      | 3    |
+----+----------+------+
1 row in set (0.00 sec)
*** 约束以及修改数据表(表结构的修改)
**** 外键约束的要求
1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表。
2.数据表的存储引擎只能为 InnoDB
3.外键列和参照列必须具有相似的数据类型。其中数字的长度和是否有符号位必须相同；而
字符长度则可以不同。
4.外键列和参照列必须创建索引。如果外键列不存在索引的话，mysql 将自动创建索引。

root@localhost test>CREATE TABLE provinces( 
id SMALLINT UNSIGNED KEY AUTO_INCREMENT,
 pname VARCHAR(20) NOT NULL);
Query OK, 0 rows affected (0.03 sec)

root@localhost test>CREATE TABLE users(
    -> id SMALLINT UNSIGNED KEY AUTO_INCREMENT,
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces(id)
    -> );

***** mysql 配置文件
default-storage-engine = INNODB

**** 外键约束的参照操作
1、CASCADE:从父表中删除或更新且自动删除或更新字表中匹配的行
2、SET NULL: 从附表删除或更新行，并设置字表的外键列为 NULL。
如果使用该选项，必须保证字表列中没有指定的 NOT NULL
3、RESTRICT: 拒绝父表的删除后更新操作
4、NO ACTION: 标准 sql 关键字，在 mysql 中与 RESTRICT 相同。

**** 表级约束与列级约束
**** 修改数据表 ***** 
***** 添加数据表
ALTER TABLES tbl_name ADD [COLUMN] col_name column_definition
[FIRST | AFTER col_name]

root@localhost test>SHOW COLUMNS FROM users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

root@localhost test>ALTER TABLE users ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
+----------+----------------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

root@localhost test>ALTER TABLE users ADD password VARCHAR(32) NOT NULL AFTER username;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
+----------+----------------------+------+-----+---------+----------------+
5 rows in set (0.01 sec)
***** 添加多列
ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,...)
***** 删除列
ALTER TABLE tbl_name DROP [COLUMN] col_name

root@localhost test>SHOW COLUMNS FROM users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
+----------+----------------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

root@localhost test>ALTER TABLE users DROP age;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

root@localhost test>ALTER TABLE users DROP username, DROP password;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users;
+-------+----------------------+------+-----+---------+----------------+
| Field | Type                 | Null | Key | Default | Extra          |
+-------+----------------------+------+-----+---------+----------------+
| id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| pid   | smallint(5) unsigned | YES  | MUL | NULL    |                |
+-------+----------------------+------+-----+---------+----------------+
2 rows in set (0.01 sec)
**** 添加主键
ALTER TABLE tbl_name ADD [CONSTRAINT] PRIMARY KEY [index_type] (index_col_name,
...)


root@localhost test>CREATE TABLE users2(
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED
    -> );
Query OK, 0 rows affected (0.02 sec)

root@localhost test>SHOW CREATE TABLE users2;
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| Table  | Create Table                                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| users2 | CREATE TABLE `users2` (
  `username` varchar(10) NOT NULL,
  `pid` smallint(5) unsigned DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.01 sec)

root@localhost test>ALTER TABLE user2 ADD id smallint unsigned;
ERROR 1146 (42S02): Table 'test.user2' doesn't exist
root@localhost test>ALTER TABLE users2 ADD id smallint unsigned;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| id       | smallint(5) unsigned | YES  |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

root@localhost test>ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
3 rows in set (0.01 sec)
**** 添加唯一约束
ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name]
[index_type] (index_col_name,...)

root@localhost test>ALTER TABLE users2 ADD UNIQUE(username);
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

root@localhost test>SHOW CREATE TABLE users2;
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table  | Create Table                                                                                                                                                                                                                                |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| users2 | CREATE TABLE `users2` (
  `username` varchar(10) NOT NULL,
  `pid` smallint(5) unsigned DEFAULT NULL,
  `id` smallint(5) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

root@localhost test>SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | UNI | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
**** 添加外键约束
ALTET TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name]
(index_col_name,...) reference_definition
**** 添加删除默认约束
ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP
DEFAULT }
**** 删除约束
**** 修改列定义和更名数据表
*** 操作数据表中的记录(记录的增删改查)
**** 插入记录
INSERT [INTO] tbl_name [(col_name,..)] {VALUES | VALUE}
({expr | DEFAULT},...),(...),...

root@localhost test>CREATE TABLE users(
    -> id smallint unsigned key auto_increment,
    -> username varchar(20) not null,
    -> password varchar(32) not null,
    -> age tinyint unsigned not null default 10,
    -> sex boolean
    -> );
Query OK, 0 rows affected (0.03 sec)

root@localhost test>show columns from users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
| sex      | tinyint(1)           | YES  |     | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

root@localhost test>insert users values(null,'Tom','123',15,1);
Query OK, 1 row affected (0.00 sec)

root@localhost test>select * from users;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  15 |    1 |
+----+----------+----------+-----+------+
1 row in set (0.00 sec)

root@localhost test>insert users values(null,'Tom','124',15,1);
Query OK, 1 row affected (0.00 sec)

root@localhost test>select * from users;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  15 |    1 |
|  2 | Tom      | 124      |  15 |    1 |
+----+----------+----------+-----+------+
2 rows in set (0.00 sec)

root@localhost test>insert users values(default,'Tom','124',15,1);
Query OK, 1 row affected (0.00 sec)

root@localhost test>select * from users;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  15 |    1 |
|  2 | Tom      | 124      |  15 |    1 |
|  3 | Tom      | 124      |  15 |    1 |
+----+----------+----------+-----+------+
3 rows in set (0.00 sec)

root@localhost test>insert users values(default,'Tom','124',15,1),(null,'Rose',md5('123'),default,0);
Query OK, 2 rows affected (0.01 sec)
Records: 2  Duplicates: 0  Warnings: 0

root@localhost test>select * from users;                                                  +----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  15 |    1 |
|  2 | Tom      | 124                              |  15 |    1 |
|  3 | Tom      | 124                              |  15 |    1 |
|  4 | Tom      | 124                              |  15 |    1 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |
+----+----------+----------------------------------+-----+------+
5 rows in set (0.00 sec)




root@localhost test>create table test(
    -> id tinyint unsigned key auto_increment,
    -> username varchar(20)
    -> );
Query OK, 0 rows affected (0.02 sec)

root@localhost test>show clumns form test;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'clumns form test' at line 1
root@localhost test>show columns from test;
+----------+---------------------+------+-----+---------+----------------+
| Field    | Type                | Null | Key | Default | Extra          |
+----------+---------------------+------+-----+---------+----------------+
| id       | tinyint(3) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)         | YES  |     | NULL    |                |
+----------+---------------------+------+-----+---------+----------------+
2 rows in set (0.00 sec)

root@localhost test>select * from test;
Empty set (0.00 sec)

root@localhost test>insert test(username) select username from users where age >=20;
Query OK, 4 rows affected (0.00 sec)
Records: 4  Duplicates: 0  Warnings: 0

root@localhost test>select * from test;
+----+----------+
| id | username |
+----+----------+
|  1 | Tom      |
|  2 | Tom      |
|  3 | Tom      |
|  4 | 111      |
+----+----------+
4 rows in set (0.00 sec)
**** 插入记录 insert set
INSERT [INFO] tbl_name SET col_name={expr | DEFAULT},...
与上一种方式的区别在于，此方法可以使用子查询（subquery)
只能插入一条记录

root@localhost test>insert users set username='Ben', password='456';
Query OK, 1 row affected (0.01 sec)

root@localhost test>show columns from users;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
| sex      | tinyint(1)           | YES  |     | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  15 |    1 |
|  2 | Tom      | 124                              |  15 |    1 |
|  3 | Tom      | 124                              |  15 |    1 |
|  4 | Tom      | 124                              |  15 |    1 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |
|  6 | Ben      | 456                              |  10 | NULL |
+----+----------+----------------------------------+-----+------+
6 rows in set (0.01 sec)
**** 单表更新记录 update

     root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  20 |    1 |
|  2 | Tom      | 124                              |  20 |    1 |
|  3 | Tom      | 124                              |  20 |    1 |
|  4 | Tom      | 124                              |  20 |    1 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  6 | Ben      | 456                              |  15 | NULL |
+----+----------+----------------------------------+-----+------+
6 rows in set (0.00 sec)

root@localhost test>update users set age= age + 5
    -> ;
Query OK, 6 rows affected (0.00 sec)
Rows matched: 6  Changed: 6  Warnings: 0

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  25 |    1 |
|  2 | Tom      | 124                              |  25 |    1 |
|  3 | Tom      | 124                              |  25 |    1 |
|  4 | Tom      | 124                              |  25 |    1 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  20 |    0 |
|  6 | Ben      | 456                              |  20 | NULL |
+----+----------+----------------------------------+-----+------+
6 rows in set (0.00 sec)

root@localhost test>update users set age=age-id,sex=0;
Query OK, 6 rows affected (0.00 sec)
Rows matched: 6  Changed: 6  Warnings: 0

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  24 |    0 |
|  2 | Tom      | 124                              |  23 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  4 | Tom      | 124                              |  21 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  6 | Ben      | 456                              |  14 |    0 |
+----+----------+----------------------------------+-----+------+
6 rows in set (0.00 sec)

root@localhost test>update users set age = age+10 where id %2 =0;
Query OK, 3 rows affected (0.01 sec)
Rows matched: 3  Changed: 3  Warnings: 0

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  24 |    0 |
|  2 | Tom      | 124                              |  33 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  6 | Ben      | 456                              |  24 |    0 |
+----+----------+----------------------------------+-----+------+
6 rows in set (0.00 sec)
**** 单表删除记录 delete
DELETE FROM tbl_name [WHERE where_condition]

root@localhost test>
root@localhost test>delete from users where id = 6;
Query OK, 1 row affected (0.01 sec)

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  24 |    0 |
|  2 | Tom      | 124                              |  33 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
+----+----------+----------------------------------+-----+------+
5 rows in set (0.00 sec)

root@localhost test>delete from users where id = 2;
Query OK, 1 row affected (0.01 sec)

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  24 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
+----+----------+----------------------------------+-----+------+
4 rows in set (0.00 sec)

root@localhost test>insert users values(null,'111','222',33,null);
Query OK, 1 row affected (0.00 sec)

root@localhost test>select * from users;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  24 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  7 | 111      | 222                              |  33 | NULL |
+----+----------+----------------------------------+-----+------+
5 rows in set (0.00 sec)
**** 查询表达式解析 select

root@localhost test>select id, username from users;
+----+----------+
| id | username |
+----+----------+
|  1 | Tom      |
|  3 | Tom      |
|  4 | Tom      |
|  5 | Rose     |
|  7 | 111      |
+----+----------+
5 rows in set (0.00 sec)

顺序影响
root@localhost test>select username,id from users;
+----------+----+
| username | id |
+----------+----+
| Tom      |  1 |
| Tom      |  3 |
| Tom      |  4 |
| Rose     |  5 |
| 111      |  7 |
+----------+----+
5 rows in set (0.00 sec)

附属关系
root@localhost test>select users.id, users.username from users;
+----+----------+
| id | username |
+----+----------+
|  1 | Tom      |
|  3 | Tom      |
|  4 | Tom      |
|  5 | Rose     |
|  7 | 111      |
+----+----------+
5 rows in set (0.00 sec)

别名
root@localhost test>select id as userId, username as uname from users;
+--------+-------+
| userId | uname |
+--------+-------+
|      1 | Tom   |
|      3 | Tom   |
|      4 | Tom   |
|      5 | Rose  |
|      7 | 111   |
+--------+-------+
5 rows in set (0.00 sec)
**** where 语句进行条件查询
对记录进行过滤，如果没有 where 子句，则显示全部记录。
在 where 表达式中，可以使用 mysql 支持的函数或运算符。
**** gourp by 对查询结果分组
root@localhost test>select sex from users group by sex;
+------+
| sex  |
+------+
| NULL |
|    0 |
+------+
2 rows in set (0.00 sec)
**** having 设置分组条件
**** order_by 对结果进行排序
root@localhost test>select * from users order by id desc;;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  7 | 111      | 222                              |  33 | NULL |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  1 | Tom      | 123                              |  24 |    0 |
+----+----------+----------------------------------+-----+------+
5 rows in set (0.00 sec)

ERROR:
No query specified

root@localhost test>select * from users order by age, id desc;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
|  3 | Tom      | 124                              |  22 |    0 |
|  1 | Tom      | 123                              |  24 |    0 |
|  4 | Tom      | 124                              |  31 |    0 |
|  7 | 111      | 222                              |  33 | NULL |
+----+----------+----------------------------------+-----+------+
5 rows in set (0.00 sec)
**** limit 限制查询数量
root@localhost test>select * from users limit 3;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  24 |    0 |
|  3 | Tom      | 124      |  22 |    0 |
|  4 | Tom      | 124      |  31 |    0 |
+----+----------+----------+-----+------+
3 rows in set (0.00 sec)

root@localhost test>select * form users limit 2,2;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'form users limit 2,2' at line 1
root@localhost test>select * from users limit 2,2;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  4 | Tom      | 124                              |  31 |    0 |
|  5 | Rose     | 202cb962ac59075b964b07152d234b70 |  15 |    0 |
+----+----------+----------------------------------+-----+------+
2 rows in set (0.01 sec)

root@localhost test>select * from users order by id desc limit 2,2;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  4 | Tom      | 124      |  31 |    0 |
|  3 | Tom      | 124      |  22 |    0 |
+----+----------+----------+-----+------+
2 rows in set (0.00 sec)
*** 小结
创建数据库 create database test;
删除数据库 drop database test;

查询表结构 show columns from test;
创建表 create table test(
id tinyint unsigned key auto_increment,
username varchar(20) not null
);
修改表 alter table test add age tinyint unsigned not null;
删除表 alter table test drop age;

查看记录 select * from test;
插入记录 insert test values(default,'Tom');
修改记录 update test set aget=age-id;
删除记录 delete from test where id = 2;
*** 子查询与连接
**** 子查询 
子查询指嵌套在查询内部，且必须始终出现在小括号内。
子查询可以包含多个关键字或条件，
如 distinct, group by, order by, limit 函数等。
子查询的外层查询可以是：select, insert, update, set 或 do.

子查询可以返回标量、一行、一列或子查询。
**** 使用比较运算符的子查询
root@localhost test>select goods_id, goods_name, goods_price from 
tdb_goods where goods_price > (select round(avg(goods_price)) from tdb_goods);
+----------+-----------------------------------------+-------------+
| goods_id | goods_name                              | goods_price |
+----------+-----------------------------------------+-------------+
|        3 | G150TH 15.6 英寸游戏本                   |    8499.000 |
|        9 | iMac ME086CH/A 21.5 英寸一体电脑         |    9188.000 |
|       13 | Mac Pro MD878CH/A 专业级台式电脑        |   28888.000 |
+----------+-----------------------------------------+-------------+
3 rows in set (0.00 sec)

如果子查询返回多个记录可以用 any 或 all 修饰 != 时只能用 all
root@localhost test>select goods_id, goods_name, goods_price from tdb_goods 
where goods_price > all (select goods_cate = '超级本' from tdb_goods);

还是以使用 in not in
**** 使用 insert select 插入记录

root@localhost test>create table tdb_goods_cates(
    -> cate_id smallint unsigned key auto_increment,
    -> cate_name varchar(40) not null
    -> );
Query OK, 0 rows affected (0.01 sec)

root@localhost test>select goods_cate from tdb_goods group by goods_cate;
+---------------------+
| goods_cate          |
+---------------------+
| 台式机              |
| 服务器/工作站       |
| 游戏本              |
| 笔记本              |
| 超级本              |
+---------------------+
5 rows in set (0.00 sec)

root@localhost test>insert tdb_goods_cates(cate_name) select goods_cate from tdb_goods group by goods_cate;
Query OK, 5 rows affected (0.00 sec)
Records: 5  Duplicates: 0  Warnings: 0

root@localhost test>select * from tdb_goods_cates;
+---------+---------------------+
| cate_id | cate_name           |
+---------+---------------------+
|       1 | 台式机              |
|       2 | 服务器/工作站       |
|       3 | 游戏本              |
|       4 | 笔记本              |
|       5 | 超级本              |
+---------+---------------------+
5 rows in set (0.00 sec)
**** 
*** 存储过程
**** 什么是存储过程
为以后使用而保存的一条或多条 mysql 语句集合。可以视为批文件。
**** 为什么使用存储过程
     简单、安全、高效。
**** 如何使用
通过 call 来调用
**** 创建使用的基本语法
*** 事务
MyISAM 引擎不支持事务处理，InnoDB 支持事务处理
**** 什么是事务处理
事务处理是一种机制，用来管理必须成批执行的 mysql 操作，以保证数据库不包含不完整的操作的结果。
**** 如何利用 commit 和 rollback 语句管理事务处理
*** 数据库的乐观锁和悲观锁是什么

** linux 系统
*** ln
ln 链接两个文件 是硬链接 在磁盘上开辟新的空间
ln -f 如果链接已经存在 可以重置链接
ln -s 软链接 不在磁盘开辟新的空间 而是新建一个小文件来记录链接

ln 和 ln -s 区别 如果 ln 删除源文件 链接文件还可以用 ln -s 不可以
*** mkdir
mkdir -p a/b/c
mkdir -v a 创建完成后返回创建是否成功信息
*** cp
cp a.txt b.txt
cp a.txt b.txt foo
cp -v a.txt b.txt
cp -f 相当于强制 cp 当权限不允许的情况下
cp -i 提示是否覆盖已有文件
cp -r foo bar copy 文件夹时
*** rm
    rm 和 cp 用法类似
*** Input/Output(|,>)
'|' We can build some pretty impressive work flows by redirecting the output of
one command to the input to another command. This is made possible by using the
"pipe" operator, '|'.
If we instead wated to read data from a file, we can use <.
*** grep
grep django requirements.txt
grep "d..n" requirements.txt 使用正则表达式
grep -c django requirements.txt 计算出现次数
grep -n django requirements.txt 显示行号
grep -i django requirements.txt 忽略大小写
grep djanog requirements.txt django.txt 从多个文件中搜索
gerp -r django ctyun 从文件中搜索
grep -r --include="*.py" "django" ctyun 从 ctyun 文件夹的.py 文件中搜索 django
grep -v "a" requirements.txt 搜索不包含 a 的所有行
grep -v "^$" requirements | grep -v "a" 搜索包含空行的非字符 a 的行
*** ps
ps
ps u
ps -e 显示所有线程
ps -U root /ps -U lichunyang
ps -L
ps -O etime,%cpu,%mem
ps -m -O %mem -u root 根据占用内存排序
ps -r -O %cpu -u root 根据占用 cpu 排序

** django 项目
*** django 部署（nginx + gunicorn)
gunicorn --bind "localhost:8000" mblog.wsgi
localhost:8000 是运行的端口 mblog 在 manage.py 的文件夹目录下

nginx
server {
    charset utf-8;
    listen 80;
    server_name demo.zmrenwu.com; ①

    location /static { ②
        alias /home/yangxg/sites/demo.zmrenwu.com/django-blog-tutorial/static; 
    }

    location / { ③
        proxy_set_header Host $host;
        proxy_pass http://unix:/tmp/demo.zmrenwu.com.socket;
    }
}
使用非 root 用户 log /var/log/nginx/error.log 配置/etc/nginx/sites-av../
1 域名或者 ip
2 当路径中写 static 用 alias  没有写用 root
3 proxy_pass 不能用 localhost 代替 127.0.0.1
*** DRF views 梳理
**** GenericViewSet(viewset)
***** GenericaAPIView
****** APIView
******* View --django 
**** minxin
***** CreateModelMixin
***** ListModelMixin
***** UpdateModelMixin
***** DestoryModelMixin
***** REtrieveModelMixin

**** celery
  celery 是一个简单、灵活且可靠的、处理大量消息的分布式系统
  专注于实时处理异步任务队列
  同时也支持任务调度
***** 使用场景
  异步任务： 将耗时操作任务提交给 celery 去异步执行，比如发送短信/邮件、消息推送、
  音视频处理等
  定时任务： 类似于 crontab， 比如每日数据统计
***** Celery 基本使用
  tasks.py
  #+BEGIN_SRC python
    import time
    from celery import Celery


    broker = 'redis://localhost:6379/1'
    backend = 'redis://localhost:6379/2'
    app = Celery('my_stacks', broker=broker, backend=backend)


    @app.task
    def add(x, y):
        print('enter call func..')
        time.sleep(4)
        return x + y
  #+END_SRC
  test_celery.py
  #+BEGIN_SRC python
    from tasks import add

    if __name__ == '__main__':
        print('start task...')
        result = add.delay(2, 8)
        print('end stask... ')
        print(result)
  #+END_SRC
  基本命令
  #+BEGIN_SRC python
    In [1]: from tasks import add

    In [2]: add.delay(2,8)
    Out[2]: <AsyncResult: d368f92c-a938-4ec3-aa28-bb046275d948>

    In [3]: result = add.delay(2,9)

    In [4]: result.ready()
    Out[4]: True

    In [5]: result.get()
    Out[5]: 11
  #+END_SRC
***** Celery 配置文件
  celery_app.__init__.py
  #+BEGIN_SRC python
    from celery import Celery


    app = Celery('demo')
    # 通过 celery 实例加载配置模块
    app.config_from_object('celery_app.celeryconfig')
  #+END_SRC
  celery_app.celeryconfig.py
  #+BEGIN_SRC python
    BROKER_URL = 'redis://localhost:6379/1'

    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'

    CELERY_TIMEZONE = 'Asia/Shanghai'

    # 导入制定模块
    CELERY_IMPORTS = (
        'celery_app.task1',
        'celery_app.task2'
    )

  #+END_SRC
  celery_app.task1.py
  #+BEGIN_SRC python
    import time

    from celery_app import app


    @app.task
    def add(x, y):
        time.sleep(3)
        return x + y

  #+END_SRC
  celery_app.task2.py
  #+BEGIN_SRC python
    import time

    from celery_app import app


    @app.task
    def multiply(x, y):
        time.sleep(4)
        return x * y

  #+END_SRC

  test_celery.py
  #+BEGIN_SRC python
    from celery_app import task1, task2


    task1.add.delay(2, 4)
    task2.multiply.delay(4, 5)
    print('end...')
  #+END_SRC
  通过 celery worker -A celery_app -l INFO 命令启动 worker
  然后运行 python test_celery.py 
***** 定时任务
  #+BEGIN_SRC python
    from datetime import timedelta
    from celery.schedules import crontab

    BROKER_URL = 'redis://localhost:6379/1'

    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'

    CELERY_TIMEZONE = 'Asia/Shanghai'

    # 导入制定模块
    CELERY_IMPORTS = (
        'celery_app.task1',
        'celery_app.task2'
    )

  #定时任务
    CELERYBEAT_SCHEDULE = {
        'task1': {
            'task': 'celery_app.task1.add',
            'schedule': timedelta(seconds=10),
            'args': (2, 8),
        },
        'task2': {
            'task': 'celery_app.task2.multiply',
            'schedule': crontab(hour=19, minute=14),
            'args': (4, 5)
        }
    }
  #+END_SRC
  启动 任务
  celery worker -A celery_app -l INFO
  celery beat -A celery_app -l INFO
***** Django 中使用 celery
  pip install django-celery 

  在 setting 同目录下创建 celeryconfig.py 文件
  #+BEGIN_SRC python
    from datetime import timedelta
    import djcelery

    djcelery.setup_loader()

    CELERY_QUEUES = {
        # 定时任务
        'beat_tasks': {
            'exchange': 'beat_tasks',
            'exchange_type': 'direct',
            'binding_key': 'beat_tasks',
        },
        # 普通任务
        'work_queue': {
            'exchange': 'work_queue',
            'exchange_type': 'direct',
            'binding_key': 'work_queue',
        }
    }

    # 默认任务
    CELERY_DEFAULT_QUEUE = 'work_queue'


    CELERY_IMPORTS = (
        'blog.tasks',
    )

    # 有些情况可以防止死锁
    CELERYD_FORCE_EXECV = True

    # 设置并发的 worker 数量
    CELERYD_CONCURRENCY = 4

    # 允许重试
    CELERY_ACKS_LATE = True

    # 每个 worker 最多执行 100 个任务被销毁，可是防止内存泄漏
    CELERYD_MAX_TASKS_PER_CHILD = 100

    #单个任务的最大运行时间
    CELERYD_TASK_TIME_LIMIT = 12 * 30

    # 定时任务
    CELERYBEAT_SCHEDULE = {
        'task1': {
            'task': 'course_task',
            'schedule': timedelta(seconds=5),
             # 'args': ()
            'options': {
                'queue': 'beat_tasks'
            }
        }
    }
  #+END_SRC

  在 app 中注册 djcelery 在 setting.py 中增加
  #+BEGIN_SRC python
    #celery
    from .celeryconfig import *  #使 celeryconfig 和 setting 联系
    # redis 配置
    BROKER_BACKEND = 'redis' 
    BROKER_URL = 'redis://localhost:6379/1'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'
  #+END_SRC

  在应用下创建 task.py 文件
  #+BEGIN_SRC python
    import time

    from celery.task import Task


    class CourseTask(Task):
        name = 'course_task'

        def run(self, *args, **kwargs):
            print('start course task')
            time.sleep(4)
            print('args={}, kwargs={}'.format(args, kwargs))
            print('end course task')
  #+END_SRC

  在 views 中
  #+BEGIN_SRC python
    from django.http import JsonResponse

    from blog.tasks import CourseTask


    def do(request):
        # 执行异步
        print('start do request')
        CourseTask.delay()
        print('end do request')
        return JsonResponse({'result': 'ok'})
  #+END_SRC

  配置 url 访问 views
  运行时 python managge.py runserver,   python manage.py celery worker -l INFO
  运行定时任务要加上  python manage.py celery beat -l INFO
* linux 基础 
** 50 个最常用的 linux 命令
grep
find
ps
free
top
df
kill
cat
chmod
ifconfig

** 学会使用命令帮助
whatis command 简要说明命令的作用
whatis -w 'l*' 正则匹配
info command 更加详细的说明文档
man command 查询 command 说明文档
which command 查看文件所在路径
whereis command 查看程序的搜索路径
当系统中安装了同一个软件的多个版本时，不确定用的是哪个版本时，这个命令就排上了
用场
** 文件目录管理
*** 创建和删除
- 创建：mkdir
- 删除：rm
- 删除非空目录：rm -rf file
- 删除日志 rm *log (等价 find ./ -name '*log' -exec rm {};)
- 移动：mv
- 复制：cp（复制目录：cp -r）
查看当前目录下文件个数
find ./ | wc -l
*** 目录切换 
cd
cd ~
cd -
pwd
*** 列出目录项
    :LOGBOOK:
    CLOCK: [2019-01-04 Fri 11:07]--[2019-01-04 Fri 11:09] =>  0:02
    :END:
    ls -lrt 按时间排序
    ls -lh 按文件大小排序
#+BEGIN_SRC python

#+END_SRC
